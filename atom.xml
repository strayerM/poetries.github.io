<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2017-11-10T07:51:40.341Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Axios异步请求的那些事</title>
    <link href="http://blog.poetries.top/2017/11/08/axios/"/>
    <id>http://blog.poetries.top/2017/11/08/axios/</id>
    <published>2017-11-08T10:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、axios-简介"><a href="#一、axios-简介" class="headerlink" title="一、axios 简介"></a>一、axios 简介</h2><blockquote><p><code>axios</code> 是一个基于<code>Promise</code>用于浏览器和 <code>nodejs</code> 的 <code>HTTP</code> 客户端，它本身具有以下特征：</p></blockquote><ul><li>从浏览器中创建 <code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 发出 <code>http</code> 请求</li><li>支持<code>Promise API</code></li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防止<code>CSRF/XSRF</code></li></ul><h2 id="二、axios基础"><a href="#二、axios基础" class="headerlink" title="二、axios基础"></a>二、axios基础</h2><ul><li><code>axios.request（config）</code></li><li><code>axios.get（url [，config]）</code></li><li><code>axios.delete（url [，config]）</code></li><li><code>axios.head（url [，config]）</code></li><li><code>axios.options（url [，config]）</code></li><li><code>axios.post（url [，data [，config]]</code>）</li><li><code>axios.put（url [，data [，config]]）</code></li><li><code>axios.patch（url [，data [，config]]）</code></li></ul><h2 id="三、执行-GET-请求"><a href="#三、执行-GET-请求" class="headerlink" title="三、执行 GET 请求"></a>三、执行 GET 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向具有指定ID的用户发出请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可以通过 params 对象传递参数</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、执行-POST-请求"><a href="#四、执行-POST-请求" class="headerlink" title="四、执行 POST 请求"></a>四、执行 POST 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    userId:<span class="string">"123"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"abc"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、通过配置方式发送请求"><a href="#五、通过配置方式发送请求" class="headerlink" title="五、通过配置方式发送请求"></a>五、通过配置方式发送请求</h2><blockquote><p><code>get</code>请求是发送参数，在<code>params</code>中定义。而<code>POST</code>请求是发送<code>request body</code>,需要在<code>data</code>中定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 在params中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"get"</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 在data中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、执行多个并发请求"><a href="#六、执行多个并发请求" class="headerlink" title="六、执行多个并发请求"></a>六、执行多个并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAcount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234/getUserPermissions"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性返回两个接口</span></span><br><span class="line">axios.all([getUserAccount(),getUserPerssions()]).then(axios.spread(<span class="function">(<span class="params">acct, perms</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// spread展开两个返回的结果</span></span><br><span class="line">    <span class="comment">//两个请求现已完成</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="七、在react的应用"><a href="#七、在react的应用" class="headerlink" title="七、在react的应用"></a>七、在react的应用</h2><blockquote><p>组件首次“挂载”（<code>mount</code>）时，该方法就会执行。在组件生命周期中，该方法只会执行一次</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    axios.get(<span class="string">`http://www.reddit.com/r/<span class="subst">$&#123;<span class="keyword">this</span>.props.subreddit&#125;</span>.json`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> posts = res.data.data.children.map(<span class="function"><span class="params">obj</span> =&gt;</span> obj.data);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; posts &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="八、参考"><a href="#八、参考" class="headerlink" title="八、参考"></a>八、参考</h2><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="external">https://github.com/axios/axios</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、axios-简介&quot;&gt;&lt;a href=&quot;#一、axios-简介&quot; class=&quot;headerlink&quot; title=&quot;一、axios 简介&quot;&gt;&lt;/a&gt;一、axios 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; 是一个基于&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Axios" scheme="http://blog.poetries.top/tags/Axios/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>浅谈styled-components</title>
    <link href="http://blog.poetries.top/2017/11/08/react-styled-components/"/>
    <id>http://blog.poetries.top/2017/11/08/react-styled-components/</id>
    <published>2017-11-08T08:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p><code>styled components</code>一种全新的控制样式的编程方式，它能解决<code>CSS</code>全局作用域的问题，而且移除了样式和组件间的映射关系</p></blockquote><ul><li>我们要理清一件事情：<code>styled-components</code> 只是 <code>CSS</code> 层面的高度抽象。它只是解析定义在 <code>JavaScript</code>中的 <code>CSS</code>，然后生成对应 <code>CSS</code> 的 <code>JSX</code>元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Title = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 1.5em;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: palevioletred;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Title&gt;Hello world&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">render(</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>styled.h1</code>是一个标签模板函数</li></ul><blockquote><p><code>styled.h1</code>函数返回一个<code>React Component</code>，<code>styled components</code>会为这个<code>React Component</code>添加一个<code>class</code>，该<code>class</code>的值为一个随机字符串。传给styled.h1的模板字符串参数的值实际上是CSS语法，这些CSS会附加到该<code>React Component</code>的<code>class</code>中，从而为<code>React Component</code>添加样式</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-1c0b2f09980a8a0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、基于-props-定制主题"><a href="#二、基于-props-定制主题" class="headerlink" title="二、基于 props 定制主题"></a>二、基于 props 定制主题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">'palevioletred'</span> : <span class="string">'white'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">'white'</span> : <span class="string">'palevioletred'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Button&gt;Normal&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button primary&gt;Primary&lt;/</span>Button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><blockquote><p>我们在组件中传入的所有 <code>props</code> 都可以在定义组件时获取到，这样就可以很容易实现组件主题的定制。如果没有 <code>styled-components</code>的情况下，需要使用组件 <code>style</code> 属性或者定义多个 <code>class</code> 的方式来实现</p></blockquote><h2 id="三、组件样式继承"><a href="#三、组件样式继承" class="headerlink" title="三、组件样式继承"></a>三、组件样式继承</h2><blockquote><p>通常在 <code>css</code> 中一般会通过给 <code>class</code>传入多个 <code>name</code> 通过空格分隔的方式来复用 <code>class</code> 定义，类似 <code>class=&quot;button tomato&quot;</code>。在 <code>styled-components</code>中利用了 <code>js</code> 的继承实现了这种样式的复用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TomatoButton = Button.extend<span class="string">`</span></span><br><span class="line"><span class="string">  color: tomato;</span></span><br><span class="line"><span class="string">  border-color: tomato;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><blockquote><p>子组件中的属性会覆盖父组件中同名的属性</p></blockquote><h2 id="四、组件内部使用-className"><a href="#四、组件内部使用-className" class="headerlink" title="四、组件内部使用 className"></a>四、组件内部使用 className</h2><blockquote><p>在日常开发中总会出现覆盖组件内部样式的需求，你可能想在 <code>styled-components</code> 中使用 <code>className</code>，或者在使用第三方组件时。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Wrapper&gt;</span><br><span class="line">  &lt;h4&gt;Hello Word&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div className="detail"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/Wrapper&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、组件中维护其他属性"><a href="#五、组件中维护其他属性" class="headerlink" title="五、组件中维护其他属性"></a>五、组件中维护其他属性</h2><blockquote><p><code>styled-components</code> 同时支持为组件传入 <code>html</code> 元素的其他属性，比如为 <code>input</code> 元素指定一个 <code>type</code> 属性，我们可以使用 <code>attrs</code> 方法来完成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Password = styled.input.attrs(&#123;</span><br><span class="line">  type: <span class="string">'password'</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>在实际开发中，这个方法还有一个有用处，用来引用第三方类库的 <code>css</code>样式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button.attrs(&#123;</span><br><span class="line">  className: <span class="string">'small'</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  background: black;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid black;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>编译后的 <code>html</code> 结构如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"sc-gPEVay small gYllyG"</span>&gt;</span><br><span class="line">  Styled Components</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以用这种方式来使用在别处定义的 <code>small</code> 样式，或者单纯为了识别自己定义的 <code>class</code>，因为正常情况下我们得到的 <code>class</code>名是不可读的编码</p></blockquote><h2 id="六、CSS-动画支持"><a href="#六、CSS-动画支持" class="headerlink" title="六、CSS 动画支持"></a>六、CSS 动画支持</h2><ul><li><code>styled-components</code> 同样对 <code>css</code> 动画中的 <code>@keyframe</code> 做了很好的支持。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">const</span> fadeIn = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  0% &#123;</span></span><br><span class="line"><span class="string">    opacity: 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  100% &#123;</span></span><br><span class="line"><span class="string">    opacity: 1;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FadeInButton = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  animation: 1s <span class="subst">$&#123;fadeIn&#125;</span> ease-out;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="七、兼容现在已有的-react-components-和-css-框架"><a href="#七、兼容现在已有的-react-components-和-css-框架" class="headerlink" title="七、兼容现在已有的 react components 和 css 框架"></a>七、兼容现在已有的 react components 和 css 框架</h2><blockquote><p><code>styled-components</code> 采用的 <code>css-module</code> 的模式有另外一个好处就是可以很好的与其他的主题库进行兼容。因为大部分的 <code>css</code> 框架或者<code>css</code>主题都是以 <code>className</code> 的方式进行样式处理的，额外的 <code>className</code> 和主题的 <code>className</code> 并不会有太大的冲突</p></blockquote><ul><li><code>styled-components</code> 的语法同样支持对一个 <code>React</code>组件进行扩展</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StyledDiv = styled(Row)<span class="string">`</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  height: 100%;</span></span><br><span class="line"><span class="string">  .image img &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .content &#123;</span></span><br><span class="line"><span class="string">    min-height: 30em;</span></span><br><span class="line"><span class="string">    overflow: auto;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .content h2 &#123;</span></span><br><span class="line"><span class="string">    font-size: 1.8em;</span></span><br><span class="line"><span class="string">    color: black;</span></span><br><span class="line"><span class="string">    margin-bottom: 1em;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="八、实战篇"><a href="#八、实战篇" class="headerlink" title="八、实战篇"></a>八、实战篇</h2><p><strong>extend与styled</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*基础组件button*/</span></span><br><span class="line">export const Button = styled.button`</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">padding</span>: 0<span class="selector-class">.25em</span> 1<span class="selector-tag">em</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: 0 1<span class="selector-tag">em</span>;</span><br><span class="line">    background: $&#123;props=&gt;props.primary?"palevioletred":"transparent"&#125;;</span><br><span class="line">    color: $&#123;props=&gt;props.primary?"white":"palevioletred"&#125;;</span><br><span class="line">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">palevioletred</span>;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩展按钮的属性，不再原来基础上修改 如在&lt;button class="abc con"&gt;上添加一个con类一样*/</span></span><br><span class="line">export const AButton = styled(Button)`</span><br><span class="line">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩展的结果*/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.25em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">color</span>: palevioletred;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid palevioletred;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**添加的扩展属性**/</span></span><br><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*继承按钮的样式并且在原来基础上修改  如在&lt;button class="con"&gt;.con类上叠加属性一样**/</span></span><br><span class="line">export const TomatoButton = Button.extend`</span><br><span class="line">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:10</span>%;</span><br><span class="line">`</span><br><span class="line"><span class="comment">/*继承的结果  子组件中的属性会覆盖父组件中同名的属性*/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.25em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">color</span>: palevioletred;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid palevioletred;</span><br><span class="line">    <span class="comment">/*添加的继承属性*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Button = styled.button`</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">`;</span><br><span class="line">const TomatoButton = Button.extend`</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#f00</span>;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** css写法 **/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.tomato-button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传递属性的两中写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">secondary</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span> <span class="attr">active</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对单个属性的值做判断赋值*/</span></span><br><span class="line"><span class="selector-tag">styled</span><span class="selector-class">.Button</span>`</span><br><span class="line">  background: $&#123;props =&gt; props.primary ? '#f00' : props.secondary ? '#0f0' : '#00f'&#125;;</span><br><span class="line">  color: $&#123;props =&gt; props.primary ? '#fff' : props.secondary ? '#fff' : '#000'&#125;;</span><br><span class="line">  opacity: $&#123;props =&gt; props.active ? 1 : 0&#125;;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Button = styled.button`</span><br><span class="line"><span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 0<span class="selector-class">.25em</span> 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 0 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">palevioletred</span>;</span><br><span class="line"><span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">palevioletred</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*可以写一堆属性*/</span></span><br><span class="line">$&#123;props =&gt; props.primary &amp;&amp; css`</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">palevioletred</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">white</span>;</span><br><span class="line">`&#125;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**css写法**/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.seconary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.secondary</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><ul><li>提出了 <code>container</code> 和 <code>components</code> 的概念，移除了组件和样式之间的映射关系，符合关注度分离的模式；</li><li>可以在样式定义中直接引用到 <code>js</code> 变量，共享变量，非常便利；</li><li>支持组件之间继承，方便代码复用，提升可维护性；</li><li>兼容现有的 <code>className</code> 方式，升级无痛；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;styled components&lt;/code&gt;一种全新的控制样式的编程方式，它能解决
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>es6在react中的应用</title>
    <link href="http://blog.poetries.top/2017/11/07/es-in-react/"/>
    <id>http://blog.poetries.top/2017/11/07/es-in-react/</id>
    <published>2017-11-07T13:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、数组遍历显示"><a href="#一、数组遍历显示" class="headerlink" title="一、数组遍历显示"></a>一、数组遍历显示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatArray</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        names.map(<span class="function">(<span class="params">name</span>) =&gt;</span>&#123;<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;&#125; )</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default RepeatArray;</span></span><br></pre></td></tr></table></figure><h2 id="二、ol与li的实现"><a href="#二、ol与li的实现" class="headerlink" title="二、ol与li的实现"></a>二、ol与li的实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatLi</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.children.map(<span class="function">(<span class="params">child</span>)=&gt;</span>&#123;<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class RepeatArray extends Component&#123;</span></span><br><span class="line"><span class="regexp">  constructor() &#123;</span></span><br><span class="line"><span class="regexp">    super();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render()&#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;RepeatLi&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;hello&lt;/</span>span&gt;</span><br><span class="line">        &lt;span&gt;world&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>RepeatLi&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default RepeatArray;</span></span><br></pre></td></tr></table></figure><h2 id="三、从服务端获取数据"><a href="#三、从服务端获取数据" class="headerlink" title="三、从服务端获取数据"></a>三、从服务端获取数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGist</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      username:<span class="string">''</span>,</span><br><span class="line">      lastGistUrl:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    $.get(<span class="keyword">this</span>.props.source, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> lastGist = result[<span class="number">0</span>];</span><br><span class="line">      <span class="comment">//if (this.isMounted()) &#123;</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          username: lastGist.owner.login,</span><br><span class="line">          lastGistUrl: lastGist.html_url</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.username&#125; ..</span><br><span class="line">        &lt;a href=&#123;<span class="keyword">this</span>.state.lastGistUrl&#125; &gt;here&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatArray</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;UserGist source=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default RepeatArray;</span></span><br></pre></td></tr></table></figure><h2 id="四、初始化STATE"><a href="#四、初始化STATE" class="headerlink" title="四、初始化STATE"></a>四、初始化STATE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、解构与扩展操作符"><a href="#五、解构与扩展操作符" class="headerlink" title="五、解构与扩展操作符"></a>五、解构与扩展操作符</h2><blockquote><p>在给子组件传递一批属性更为方便了。下面的例子把<code>className</code>以外的所有属性传递给<code>div</code>标签</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoloadingPostsGrid</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> &#123;</span><br><span class="line">            className,</span><br><span class="line">            ...others,  <span class="comment">// contains all properties of this.props except for className</span></span><br><span class="line">        &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;className&#125;&gt;</span><br><span class="line">                &lt;PostsGrid &#123;...others&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleLoadMoreClick&#125;&gt;Load more&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>react</code>开发最常见的问题就是父组件要传给子组件的属性较多时比较麻烦</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">//假设MyComponent已经有了name和age属性</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SubComponent name=&#123;<span class="keyword">this</span>.props.name&#125; age=&#123;<span class="keyword">this</span>.props.age&#125;/&gt;</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用扩展操作符可以变得很简单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">//假设MyComponent已经有了name和age属性</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SubComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述方式是将父组件的所有属性都传递下去，如果这其中有些属性我不需要传递呢？也很简单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">//假设MyComponent有很多属性，而name属性不需要传递给子组件</span></span><br><span class="line">  <span class="keyword">var</span> &#123;name,...MyProps&#125;=<span class="keyword">this</span>.props;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SubComponent &#123;...Myprops&#125;/&gt;</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述方法最常用的场景就是父组件的<code>class</code>属性需要被单独提取出来作为某个元素的<code>class</code>，而其他属性需要传递给子组件</p></blockquote><h2 id="六、创建组件"><a href="#六、创建组件" class="headerlink" title="六、创建组件"></a>六、创建组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">//组件内部代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、State-Props-PropTypes"><a href="#七、State-Props-PropTypes" class="headerlink" title="七、State/Props/PropTypes"></a>七、State/Props/PropTypes</h2><blockquote><p><code>es6</code>允许将<code>props</code>和<code>propTypes</code>当作静态属性在类外初始化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br><span class="line">MyComponent.defaultProps=&#123;</span><br><span class="line">  name:<span class="string">"SunnyChuan"</span>,</span><br><span class="line">  age:<span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line">MyComponent.propTypes=&#123;</span><br><span class="line">  name:React.PropTypes.string.isRequired,</span><br><span class="line">  age:React.PropTypes.number.isRequired</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>es7</code>支持直接在类中使用变量表达式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps=&#123;</span><br><span class="line">    name:<span class="string">"SunnyChuan"</span>,</span><br><span class="line">    age:<span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> propTypes=&#123;</span><br><span class="line">    name:React.PropTypes.string.isRequired,</span><br><span class="line">    age:React.PropTypes.number.isRequired</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>state</code>和前两个不同，它不是静态的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps=&#123;</span><br><span class="line">    name:<span class="string">"SunnyChuan"</span>,</span><br><span class="line">    age:<span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">  state=&#123;</span><br><span class="line">     isMarried:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> propTypes=&#123;</span><br><span class="line">    name:React.PropTypes.string.isRequired,</span><br><span class="line">    age:React.PropTypes.number.isRequired</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、当你构建通用容器时，扩展属性会非常有用"><a href="#七、当你构建通用容器时，扩展属性会非常有用" class="headerlink" title="七、当你构建通用容器时，扩展属性会非常有用"></a>七、当你构建通用容器时，扩展属性会非常有用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">firstName</span>=<span class="string">"Ben"</span> <span class="attr">lastName</span>=<span class="string">"Hector"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function App2() &#123;</span></span><br><span class="line"><span class="xml">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</span></span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、使用es6的计算属性代替"><a href="#八、使用es6的计算属性代替" class="headerlink" title="八、使用es6的计算属性代替"></a>八、使用es6的计算属性代替</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">   [name]:value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//代替</span></span><br><span class="line"><span class="keyword">var</span> partialState = &#123;&#125;;</span><br><span class="line">partialState[name] = value;</span><br><span class="line"><span class="keyword">this</span>.setState(partialState);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、数组遍历显示&quot;&gt;&lt;a href=&quot;#一、数组遍历显示&quot; class=&quot;headerlink&quot; title=&quot;一、数组遍历显示&quot;&gt;&lt;/a&gt;一、数组遍历显示&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react知识点回顾</title>
    <link href="http://blog.poetries.top/2017/11/07/react-summary/"/>
    <id>http://blog.poetries.top/2017/11/07/react-summary/</id>
    <published>2017-11-07T11:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、npm的配置"><a href="#一、npm的配置" class="headerlink" title="一、npm的配置"></a>一、npm的配置</h2><blockquote><p>切换淘宝镜像源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><blockquote><p>使用npm安装react</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install react react-dom --save</span><br></pre></td></tr></table></figure><h2 id="二、开发环境配置"><a href="#二、开发环境配置" class="headerlink" title="二、开发环境配置"></a>二、开发环境配置</h2><blockquote><p>这里使用<code>create-react-app</code>初始化项目</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br></pre></td></tr></table></figure><blockquote><p>安装完成之后就可以在命令行使用 <code>create-react-app</code> 了，首先选择一个合适的目录，然后只需要简单地输入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app yourfilename</span><br></pre></td></tr></table></figure><h2 id="三、认识JSX"><a href="#三、认识JSX" class="headerlink" title="三、认识JSX"></a>三、认识JSX</h2><h3 id="3-1-JSX-简介"><a href="#3-1-JSX-简介" class="headerlink" title="3.1 JSX 简介"></a>3.1 JSX 简介</h3><blockquote><p><code>JSX</code> 其是一个语法扩展，它既不是单纯的字符串，也不是<code>HTML</code>，虽然长得和 <code>HTML</code> 很像甚至基本上看起来一样。但事实上它是 <code>React</code> 内部实现的一种，允许我们直接在 <code>JS</code> 里书写 <code>UI</code> 的方式</p></blockquote><h3 id="3-2-JSX-属性"><a href="#3-2-JSX-属性" class="headerlink" title="3.2 JSX 属性"></a>3.2 JSX 属性</h3><blockquote><p><code>JSX</code> 的标签同样可以拥有自己的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span>React Learning<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意是 className 而不是 class</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span>React Learning<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-3-JSX-嵌套"><a href="#3-3-JSX-嵌套" class="headerlink" title="3.3 JSX 嵌套"></a>3.3 JSX 嵌套</h3><blockquote><p><code>JSX</code> 的标签也可以像 <code>HTML</code> 一样相互嵌套，一般有嵌套解构的 <code>JSX</code> 元素外面，我们习惯于为它加上一个小括号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;Let's learn JSX&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<code>JSX</code> 在嵌套时，最外层有且只能有一个标签，否则就会出错</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个错误示例</span></span><br><span class="line"><span class="keyword">const</span> title = (            </span><br><span class="line">    &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Let's learn JSX&lt;/</span>p&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-4-JSX表达式"><a href="#3-4-JSX表达式" class="headerlink" title="3.4 JSX表达式"></a>3.4 JSX表达式</h3><blockquote><p>在 <code>JSX</code> 元素中，我们同样可以使用 <code>JavaScript</code> 表达式，在 <code>JSX</code> 当中的表达式需要用一个大括号括起来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayhi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hi,'</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;Let's learn JSX. &lt;span&gt;&#123;sayhi('you')&#125;&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="四、组件类型"><a href="#四、组件类型" class="headerlink" title="四、组件类型"></a>四、组件类型</h2><h3 id="4-1-函数定义与类定义组件"><a href="#4-1-函数定义与类定义组件" class="headerlink" title="4.1 函数定义与类定义组件"></a>4.1 函数定义与类定义组件</h3><blockquote><p>第一种函数定义组件，非常简单啦，我们只需要定义一个接收<code>props</code>传值，返回<code>React</code>元素的方法即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Title</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 甚至使用ES6的箭头函数简写之后可以变成这样</span></span><br><span class="line"><span class="keyword">const</span> Title = <span class="function"><span class="params">props</span> =&gt;</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第二种是类定义组件，也就是使用<code>ES6</code>中新引入的类的概念来定义<code>React</code>组件</p></blockquote><ul><li>组件在定义好之后，可以通过<code>JSX</code>描述的方式被引用，组件之间也可以相互嵌套和组合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-展示与容器组件"><a href="#4-2-展示与容器组件" class="headerlink" title="4.2 展示与容器组件"></a>4.2 展示与容器组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示组件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderComment(&#123;body, author&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;body&#125;—&#123;author&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> &#123;this.props.comments.map(this.renderComment)&#125; <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentListContainer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">comments</span>: [] &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"/my-comments.json"</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">comments</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">comments</span>: comments&#125;)</span><br><span class="line">      &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CommentList</span> <span class="attr">comments</span>=<span class="string">&#123;this.state.comments&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>展示组件</strong></p><ul><li>主要负责组件内容如何展示</li><li>从<code>props</code>接收父组件传递来的数据</li><li>大多数情况可以通过函数定义组件声明</li></ul><p><strong>容器组件</strong></p><ul><li>主要关注组件数据如何交互</li><li>拥有自身的<code>state</code>，从服务器获取数据，或与<code>redux</code>等其他数据处理模块协作</li><li>需要通过类定义组件声明，并包含生命周期函数和其他附加方法</li></ul><p><strong>那么这样写具体有什么好处呢？</strong></p><ul><li>解耦了界面和数据的逻辑</li><li>更好的可复用性，比如同一个回复列表展示组件可以套用不同数据源的容器组件</li><li>利于团队协作，一个人负责界面结构，一个人负责数据交互</li></ul><h3 id="4-3-有状态与无状态组件"><a href="#4-3-有状态与无状态组件" class="headerlink" title="4.3 有状态与无状态组件"></a>4.3 有状态与无状态组件</h3><p><strong>有状态组件</strong></p><blockquote><p>这个组件能够获取储存改变应用或组件本身的状态数据，在<code>React</code>当中也就是<code>state</code>，一些比较明显的特征是我们可以在这样的组件当中看到对<code>this.state</code>的初始化，或<code>this.setState</code>方法的调用</p></blockquote><p><strong>无状态组件</strong></p><blockquote><p>这样的组件一般只接收来自其他组件的数据。一般这样的组件中只能看到对<code>this.props</code>的调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      active: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      active: !<span class="keyword">this</span>.state.active</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> </span></span></span><br><span class="line"><span class="xml">          style=&#123;&#123; color: this.state.active ? 'red' : 'black' &#125;&#125;</span></span><br><span class="line"><span class="xml">          onClick=&#123;this.handleClick.bind(this)&#125;</span></span><br><span class="line"><span class="xml">         &gt;</span></span><br><span class="line"><span class="xml">           Stateful Link</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.handleClick(<span class="keyword">this</span>.props.router)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> active = <span class="keyword">this</span>.props.activeRouter === <span class="keyword">this</span>.props.router</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a </span><br><span class="line">              style=&#123;&#123; <span class="attr">color</span>: active ? <span class="string">'red'</span> : <span class="string">'black'</span> &#125;&#125;</span><br><span class="line">              onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">             &gt;</span><br><span class="line">                Stateless Link</span><br><span class="line">            &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>React</code>的实际开发当中，我们编写的组件大部分都是无状态组件。毕竟<code>React</code>的主要作用是编写用户界面。再加上<code>ES6</code>的新特性，绝大多数的无状态组件都可以通过箭头函数简写成类似下面这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SimpleButton = <span class="function"><span class="params">props</span> =&gt;</span> &lt;button&gt;&#123;props.text&#125;&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-受控与非受控组件"><a href="#4-4-受控与非受控组件" class="headerlink" title="4.4 受控与非受控组件"></a>4.4 受控与非受控组件</h3><p><strong>受控组件</strong></p><blockquote><p>比如说设置了<code>value</code>的<code>&lt;input&gt;</code> 是一个受控组件。对于受控的<code>&lt;input&gt;</code>，渲染出来的<code>html</code>元素始终保持着<code>value</code>属性的值，如以下代码</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5bc310822e0895fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>此时如果想要更新用户的值。需要使用<code>onChange</code>事件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-448f6f21ba0df9b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>非受控组件</strong></p><blockquote><p>即没有设置<code>value</code>或者设置为<code>null</code>的是一个非受控组件，对于非受控的<code>input</code>组件，用户的输入会直接反映在页面上</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-90c6f85dc75ef3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>上面的代码渲染出一个空值的输入框，用户的输入立即会反映在元素上</li><li>和受控组件一样，使用<code>onChange</code>事件来监听值的变化，如果想要给组件设置一个非空的初始值。可以使用<code>defaultValue</code>属</li><li>通常情况下，<code>React</code>当中所有的表单控件都需要是受控组件</li></ul><h3 id="4-5-组合与继承"><a href="#4-5-组合与继承" class="headerlink" title="4.5 组合与继承"></a>4.5 组合与继承</h3><ul><li><code>React</code>当中的组件是通过嵌套或组合的方式实现组件代码复用的</li><li>通过<code>props</code>传值和组合使用组件几乎可以满足所有场景下的需求。这样也更符合组件化的理念，就好像使用互相嵌套的<code>DOM</code>元素一样使用<code>React</code>的组件，并不需要引入继承的概念</li></ul><blockquote><p>继承的写法并不符合<code>React</code>的理念。在<code>React</code>当中<code>props</code>其实是非常强大的，<code>props</code>几乎可以传入任何东西，变量、函数、甚至是组件本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React官方也希望我们通过组合的方式来使用组件，如果你想实现一些非界面类型函数的复用，可以单独写在其他的模块当中在引入组件进行使用</p></blockquote><h2 id="五、组件数据"><a href="#五、组件数据" class="headerlink" title="五、组件数据"></a>五、组件数据</h2><hr><h3 id="5-1-props"><a href="#5-1-props" class="headerlink" title="5.1 props"></a>5.1 props</h3><ul><li>传入变量</li><li>传入函数</li><li>传入组件</li><li><code>props.children</code></li></ul><blockquote><ul><li>在形式上，<code>props</code>之于<code>JSX</code>就相当于<code>attributes</code>之于<code>HTML</code>。从写法上来看呢，我们为组件传入<code>props</code>就可以像为<code>HTML</code>标签添加属性一样</li><li>在概念上，props对于组件就相当于JS中参数之于函数。我们可以抽象出这样一个函数来解释</li></ul></blockquote><ul><li><code>props</code> 几乎可以传递所有的内容，包括变量、函数、甚至是组件本身</li></ul><p><strong>props是只读的</strong></p><ul><li>在<code>React</code>中，<code>props</code>都是自上向下传递，从父组件传入子组件</li><li>并且<code>props</code>是只读的，我们不能在组件中直接修改<code>props</code>的内容</li><li>也即是说组件只能根据传入的<code>props</code>渲染界面，而不能在其内部对<code>props</code>进行修改</li></ul><p><strong>props类型检查</strong></p><blockquote><p>正是因为<code>props</code>的强大，什么类型的内容都可以传递，所以在开发过程中，为了避免错误类型的内容传入，我们可以为<code>props</code>添加类型检查</p></blockquote><p><strong>props默认值</strong></p><blockquote><p>由于<code>props</code>是只读的，我们不能直接为<code>props</code>赋值。<code>React</code>专门准备了一个方法定义<code>props</code>的默认值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Title = <span class="function"><span class="params">props</span> =&gt;</span> &lt;h1&gt;&#123;props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Title.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  title: 'Wait for parent to pass props.'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Title.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  title: PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-state"><a href="#5-2-state" class="headerlink" title="5.2 state"></a>5.2 state</h3><ul><li>初始化</li><li><code>setState</code>方法</li><li>向下传递数据</li></ul><blockquote><ul><li>在<code>React</code>中<code>state</code>也是我们进行数据交互的地方，又或者叫做<code>state management</code>状态管理。</li><li>一个应用需要进行数据交互，比如同服务器之间的交互，同用户输入进行交互。话反过来，从<code>API</code>获取数据，处理用户输入也就是我们需要用到<code>state</code>的时候</li></ul></blockquote><ul><li>在新版本的<code>React</code>当中，我们通过类定义组件来声明一个有状态组件，之后在它的构造方法中初始化组件的<code>state</code>，我们可以先赋予它默认值。</li><li>之后就可以在组件中通过<code>this.state</code>来访问它，既然是<code>state</code>那么肯定涉及到数据的改变，因此我们还需额外定义一个负责处理<code>state</code>变化的函数，这样的函数中一般都会包含<code>this.setState</code>这个方法</li><li>和之前的<code>props</code>一样，初始化<code>state</code>之后，如果我们想改变它，是不可以直接对其赋值的，直接修改<code>state</code>的值没有任何意义，因为这样的操作脱离了<code>React</code>运行的逻辑，不会触发组件的重新渲染。所以需要<code>this.setState</code>这个方法，在改变<code>state</code>的同时，触发<code>React</code>内部的一系列函数，最后在页面上重新渲染出组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  addOne() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span>(&#123;</span><br><span class="line">      counter: prevState.counter + <span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123; <span class="keyword">this</span>.state.counter &#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button</span></span><br><span class="line"><span class="regexp">          onClick=&#123;() =&gt; this.addOne()&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Increment</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、组件生命周期"><a href="#六、组件生命周期" class="headerlink" title="六、组件生命周期"></a>六、组件生命周期</h2><h3 id="6-1-React是如何渲染组件的"><a href="#6-1-React是如何渲染组件的" class="headerlink" title="6.1 React是如何渲染组件的"></a>6.1 React是如何渲染组件的</h3><blockquote><ul><li>在新版本的<code>React</code>当中，<code>React</code>的底层被重写了。<code>React</code>换上了一个新的引擎，这个引擎叫做<code>React Fiber.React Fiber</code> 作用的也即是<code>React</code>最核心的功能，它将<code>React</code>应用界面更新的过程分为了两个主要的部分：</li></ul></blockquote><ul><li>调度过程</li><li>执行过程</li></ul><blockquote><p>在调度过程中，有4个生命周期函数会被触发</p></blockquote><ul><li><code>componentWillMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li></ul><blockquote><p>在执行过程中，有3个生命周期函数会被触发：</p></blockquote><ul><li><code>componentDidMount</code></li><li><code>componentDidUpdate</code></li><li><code>componentWillUnmount</code></li></ul><h3 id="6-2-React组件生命周期方法"><a href="#6-2-React组件生命周期方法" class="headerlink" title="6.2 React组件生命周期方法"></a>6.2 React组件生命周期方法</h3><blockquote><p><code>React</code>为了方便我们更好地控制自己的应用，提供了许多预置的生命周期方法。这些固定的生命周期方法分别会在组件的挂载流程、更新流程、卸载流程中触发</p></blockquote><ul><li><code>componentWillMount</code> 开始插入真实DOM</li><li><code>componentDidMount</code> 插入真实<code>DOM</code>完成</li><li><code>componentWillUpdate</code> 开始重新渲染</li><li><code>componentDidUpdate</code> 重新渲染完成</li><li><code>componentWillUnmount</code>已移出真实 <code>DOM</code></li><li><code>componentWillReceiveProps</code> 已加载组件收到新的参数时调用</li><li><code>shouldComponentUpdate</code>组件判断是否重新渲染时调用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-2921ad93a9b5c407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5c75fb0760cf0c1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>componentDidMount</strong></p><blockquote><p>在此方法中可进行</p></blockquote><ul><li>与其他 <code>JavaScript</code> 框架集成，如初始化 <code>jQuery</code> 插件；</li><li>使用 <code>setTimeout</code>/<code>setInterval</code> 设置定时器；</li><li>通过 <code>Ajax</code>/<code>Fetch</code> 获取数据；</li><li>绑定 <code>DOM</code> 事件</li></ul><h3 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h3><ul><li>React组件渲染包含三个流程：挂载流程、更新流程、卸载流程</li><li>各个生命周期函数会在特定的时刻触发并适用于不同的使用场景</li><li>通过使用生命周期函数我们可以对应用进行更精准的控制</li><li>如果你需要发起网络请求，将其安排在合适的生命周期函数中是值得推荐的做法</li><li>了解掌握<code>React</code>组件渲染的流程和原理对我们更深入掌握<code>React</code>非常有帮助</li></ul><h2 id="七、表单及事件处理"><a href="#七、表单及事件处理" class="headerlink" title="七、表单及事件处理"></a>七、表单及事件处理</h2><h3 id="7-1-表单"><a href="#7-1-表单" class="headerlink" title="7.1 表单"></a>7.1 表单</h3><blockquote><p>受控与非受控组件就是专门适用于React当中的表单元素的</p></blockquote><ul><li>只要是有表单出现的地方，就会有用户输入，就会有表单事件触发，就会涉及的数据处理</li><li>在我们用<code>React</code>开发应用时，为了更好地管理应用中的数据，响应用户的输入，编写组件的时候呢，我们就会运用到受控组件与非受控组件这两个概念。</li></ul><h3 id="7-2-表单元素"><a href="#7-2-表单元素" class="headerlink" title="7.2 表单元素"></a>7.2 表单元素</h3><blockquote><p>我们在组件中声明表单元素时，一般都要为表单元素传入应用状态中的值，可以通过<code>state</code>也可以通过<code>props</code>传递，之后需要为其绑定相关事件，例如表单提交，输入改变等。在相关事件触发的处理函数中，我们需要根据表单元素中用户的输入，对应用数据进行相应的操作和改变</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlledInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: event.target.value</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="xml">              type="text" </span></span><br><span class="line"><span class="xml">              value=&#123;this.state.value&#125; </span></span><br><span class="line"><span class="xml">              onChange=&#123;() =&gt; this.handleChange()&#125; </span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>受控组件的输入数据是一直和我们的应用状态绑定的，事件处理函数中一定要有关<code>state</code>的更新操作，这样表单组件才能及时正确响应用户的输入</p></blockquote><p><strong>textarea</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">  Hello there, this is some text in a text area</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-事件"><a href="#7-3-事件" class="headerlink" title="7.3 事件"></a>7.3 事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"activateLasers()"</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;activateLasers&#125;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、redux-router"><a href="#八、redux-router" class="headerlink" title="八、redux-router"></a>八、redux-router</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cae1c4d6de6642de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="react-router"></p><h3 id="8-1、基本用法"><a href="#8-1、基本用法" class="headerlink" title="8.1、基本用法"></a>8.1、基本用法</h3><blockquote><p>使用时，路由器<code>Router</code>就是<code>React</code>的一个组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><blockquote><p><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route</code>组件定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line">render((</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问根路由<code>/</code>，组件APP就会加载到<code>document.getElementById(&#39;app&#39;)</code></p></blockquote><ul><li><code>Router</code>组件有一个参数<code>history</code>，它的值<code>hashHistory</code>表示，路由的切换由<code>URL</code>的<code>hash</code>变化决定，即<code>URL</code>的<code>#</code>部分发生变化</li><li><code>Route</code>组件定义了<code>URL</code>路径与组件的对应关系。你可以同时使用多个<code>Route</code>组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/repos"</span> component=&#123;Repos&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问<code>/repos</code>（比如<code>http://localhost:8080/#/repos</code>）时，加载<code>Repos</code>组件；访问<code>/about（http://localhost:8080/#/about）</code>时，加载<code>About</code>组件</p></blockquote><h3 id="8-2、嵌套路由"><a href="#8-2、嵌套路由" class="headerlink" title="8.2、嵌套路由"></a>8.2、嵌套路由</h3><blockquote><p><code>Route</code>组件还可以嵌套</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/repos"</span> component=&#123;Repos&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问<code>/repos</code>时，会先加载<code>App</code>组件，然后在它的内部再加载<code>Repos</code>组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Repos/&gt;</span><br><span class="line">&lt;<span class="regexp">/App&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>App</code>组件要写成下面的样子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>App</code>组件的<code>this.props.children</code>属性就是子组件</p></blockquote><h3 id="8-3、-path-属性"><a href="#8-3、-path-属性" class="headerlink" title="8.3、 path 属性"></a>8.3、 path 属性</h3><blockquote><p><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件</p></blockquote><ul><li><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">   &lt;Route path=<span class="string">"messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当用户访问<code>/inbox/messages/:id</code>时，会加载下面的组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Inbox&gt;</span><br><span class="line">  &lt;Message/&gt;</span><br><span class="line">&lt;<span class="regexp">/Inbox&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果省略外层<code>Route</code>的<code>path</code>参数，写成下面的样子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route component=&#123;Inbox&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"inbox/messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在用户访问<code>/inbox/messages/:id</code>时，组件加载还是原来的样子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Inbox&gt;</span><br><span class="line">  &lt;Message/&gt;</span><br><span class="line">&lt;<span class="regexp">/Inbox&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4、通配符"><a href="#8-4、通配符" class="headerlink" title="8.4、通配符"></a>8.4、通配符</h3><blockquote><p><code>path</code>属性可以使用通配符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/hello/:name"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /hello/michael</span></span><br><span class="line"><span class="comment">// 匹配 /hello/ryan</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/hello(/:name)"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /hello</span></span><br><span class="line"><span class="comment">// 匹配 /hello/michael</span></span><br><span class="line"><span class="comment">// 匹配 /hello/ryan</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/files/*.*"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/hello.jpg</span></span><br><span class="line"><span class="comment">// 匹配 /files/hello.html</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/files/*"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/ </span></span><br><span class="line"><span class="comment">// 匹配 /files/a</span></span><br><span class="line"><span class="comment">// 匹配 /files/a/b</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/**/*.jpg"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/hello.jpg</span></span><br><span class="line"><span class="comment">// 匹配 /files/path/to/file.jpg</span></span><br></pre></td></tr></table></figure><p><strong>通配符的规则如下</strong></p><ul><li><strong>:paramName</strong></li></ul><blockquote><p><code>:paramName</code>匹配<code>URL</code>的一个部分，直到遇到下一个<code>/</code>、<code>?</code>、<code>#</code>为止。这个路径参数可以通过<code>this.props.params.paramName</code>取出</p></blockquote><ul><li><strong>()</strong></li></ul><blockquote><p><code>()</code>表示<code>URL</code>的这个部分是可选的</p></blockquote><ul><li>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式</li><li>匹配任意字符，直到下一个<code>/</code>、<code>?</code>、<code>#</code>为止。匹配方式是贪婪模式</li></ul><blockquote><p><code>path</code>属性也可以使用相对路径（不以<code>/</code>开头），匹配时就会相对于父组件的路径。嵌套路由如果想摆脱这个规则，可以使用绝对路由</p></blockquote><ul><li>此外，<code>URL</code>的查询字符串<code>/foo?bar=baz</code>，可以用<code>this.props.location.query.bar</code>获取</li></ul><h3 id="8-5、IndexRoute-组件"><a href="#8-5、IndexRoute-组件" class="headerlink" title="8.5、IndexRoute 组件"></a>8.5、IndexRoute 组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>上面代码中，访问根路径<code>/</code>，不会加载任何子组件。也就是说，<code>App</code>组件的<code>this.props.children</code>，这时是<code>undefined</code></li><li>因此，通常会采用{<code>this.props.children</code> || <code>&lt;Home/&gt;}</code>这样的写法。这时，Home明明是<code>Accounts</code>和<code>Statements</code>的同级组件，却没有写在<code>Route</code>中</li><li>IndexRoute就是解决这个问题，显式指定Home是根路由的子组件，即指定默认情况下加载的子组件。你可以把<code>IndexRoute</code>想象成某个路径的<code>index.html</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><p>现在，用户访问<code>/</code>的时候，加载的组件结构如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Home/&gt;</span><br><span class="line">&lt;<span class="regexp">/App&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>IndexRoute</code>组件没有路径参数<code>path</code></li></ul><h3 id="8-6、Redirect-组件"><a href="#8-6、Redirect-组件" class="headerlink" title="8.6、Redirect 组件"></a>8.6、Redirect 组件</h3><blockquote><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">  &#123;<span class="comment">/* 从 /inbox/messages/:id 跳转到 /messages/:id */</span>&#125;</span><br><span class="line">  ＜Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在访问<code>/inbox/messages/5</code>，会自动跳转到<code>/messages/5</code></p></blockquote><h3 id="8-7、IndexRedirect-组件"><a href="#8-7、IndexRedirect-组件" class="headerlink" title="8.7、IndexRedirect 组件"></a>8.7、IndexRedirect 组件</h3><blockquote><p><code>IndexRedirect</code>组件用于访问根路由的时候，将用户重定向到某个子组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">  ＜IndexRedirect to=<span class="string">"/welcome"</span> /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"welcome"</span> component=&#123;Welcome&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用户访问根路径时，将自动重定向到子组件<code>welcome</code></p></blockquote><h3 id="8-8、Link"><a href="#8-8、Link" class="headerlink" title="8.8、Link"></a>8.8、Link</h3><blockquote><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的<code>React</code> 版本，可以接收<code>Router</code>的状态</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul role="nav"&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/about"&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/repos"&gt;Repos&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果希望当前的路由与其他路由有不同样式，这时可以使用<code>Link</code>组件的<code>activeStyle</code>属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">"/about"</span> activeStyle=&#123;&#123;<span class="attr">color</span>: <span class="string">'red'</span>&#125;&#125;&gt;About&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">&lt;Link to="/</span>repos<span class="string">" activeStyle=&#123;&#123;color: 'red'&#125;&#125;&gt;Repos&lt;/Link&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>Router</code>组件之外，导航到路由页面，可以使用浏览器的<code>History API</code>，像下面这样写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line">browserHistory.push(<span class="string">'/some/path'</span>);</span><br></pre></td></tr></table></figure><h3 id="8-9、IndexLink"><a href="#8-9、IndexLink" class="headerlink" title="8.9、IndexLink"></a>8.9、IndexLink</h3><blockquote><p>如果链接到根路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件</p></blockquote><ul><li>是因为对于根路由来说，<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效，因为<code>/</code>会匹配任何子路由。而<code>IndexLink</code>组件会使用路径的精确匹配</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IndexLink to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span>&gt;</span><br><span class="line">  Home</span><br><span class="line">&lt;<span class="regexp">/IndexLink&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，根路由只会在精确匹配时，才具有<code>activeClassName</code></p></blockquote><h3 id="8-10、histroy-属性"><a href="#8-10、histroy-属性" class="headerlink" title="8.10、histroy 属性"></a>8.10、histroy 属性</h3><blockquote><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将<code>URL</code>解析成一个地址对象，供 <code>React Router</code> 匹配</p></blockquote><ul><li><code>history</code>属性，一共可以设置三种值。<ul><li><code>browserHistory</code></li><li><code>hashHistory</code></li><li><code>createMemoryHistory</code></li></ul></li></ul><blockquote><p>如果设为<code>hashHistory</code>，路由将通过<code>URL</code>的hash部分<code>（#）</code>切换，<code>URL</code>的形式类似<code>example.com/#/some/path</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>如果设为<code>browserHistory</code>，浏览器的路由就不再通过<code>Hash</code>完成了，而显示正常的路径<code>example.com/some/path</code>，背后调用的是浏览器的<code>History API</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>但是，这种情况需要对服务器改造。否则用户直接向服务器请求某个子路由，会显示网页找不到的<code>404</code>错误。</p></blockquote><h3 id="8-11、表单处理"><a href="#8-11、表单处理" class="headerlink" title="8.11、表单处理"></a>8.11、表单处理</h3><blockquote><p><code>Link</code>组件用于正常的用户点击跳转，但是有时还需要表单跳转、点击按钮跳转等操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"userName"</span>/&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"repo"</span>/&gt;</span><br><span class="line">  &lt;button type=<span class="string">"submit"</span>&gt;Go&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br></pre></td></tr></table></figure><p><strong>第一种方法是使用browserHistory.push</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> userName = event.target.elements[<span class="number">0</span>].value</span><br><span class="line">    <span class="keyword">const</span> repo = event.target.elements[<span class="number">1</span>].value</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`/repos/<span class="subst">$&#123;userName&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">    browserHistory.push(path)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>第二种方法是使用context对象</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  // ask for `router` from context</span><br><span class="line">  contextTypes: &#123;</span><br><span class="line">    router: React.PropTypes.object</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    this.context.router.push(path)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-12、路由的钩子"><a href="#8-12、路由的钩子" class="headerlink" title="8.12、路由的钩子"></a>8.12、路由的钩子</h3><blockquote><p>每个路由都有<code>Enter</code>和<code>Leave</code>钩子，用户进入或离开该路由时触发</p></blockquote><ul><li>上面的代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子<ul><li><code>/messages/:id</code>的<code>onLeave</code></li><li><code>/inbox</code>的<code>onLeave</code></li><li><code>/about</code>的<code>onEnter</code></li></ul></li></ul><h2 id="九、redux"><a href="#九、redux" class="headerlink" title="九、redux"></a>九、redux</h2><h3 id="9-1-Redux-的适用场景"><a href="#9-1-Redux-的适用场景" class="headerlink" title="9.1 Redux 的适用场景"></a>9.1 Redux 的适用场景</h3><ul><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ul><p><strong>Redux设计思想</strong></p><blockquote><p><code>Redux</code> 的设计思想很简单，就两句话</p></blockquote><ul><li><code>Web</code> 应用是一个状态机，视图与状态是一一对应的</li><li>所有的状态，保存在一个对象里面</li></ul><h3 id="9-2-基本概念和-API"><a href="#9-2-基本概念和-API" class="headerlink" title="9.2 基本概念和 API"></a>9.2 基本概念和 API</h3><p><strong>Store</strong></p><ul><li><code>Store</code> 提供了三个方法<ul><li><code>store.getState()</code></li><li><code>store.dispatch()</code></li><li><code>store.subscribe()</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</span><br></pre></td></tr></table></figure><blockquote><p><code>Store</code>就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 <code>Store</code></p></blockquote><ul><li><code>Redux</code> 提供<code>createStore</code>这个函数，用来生成 <code>Store</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer); <span class="comment">// 返回新生成的 Store 对象</span></span><br></pre></td></tr></table></figure><p><strong>State</strong></p><blockquote><p><code>Store</code>对象包含所有数据。如果想得到某个时点的数据，就要对 <code>Store</code> 生成快照。这种时点的数据集合，就叫做 <code>State</code></p></blockquote><ul><li>当前时刻的 <code>State</code>，可以通过<code>store.getState()</code>拿到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = store.getState();</span><br></pre></td></tr></table></figure><blockquote><p><code>Redux</code> 规定， 一个 <code>State</code> 对应一个 <code>View</code>。只要 <code>State</code> 相同，<code>View</code> 就相同。你知道 <code>State</code>，就知道 <code>View</code> 是什么样，反之亦然</p></blockquote><p><strong>Action</strong></p><blockquote><p><code>State</code> 的变化，会导致 <code>View</code> 的变化。但是，用户接触不到 <code>State</code>，只能接触到 <code>View</code>。所以，<code>State</code> 的变化必须是 <code>View</code> 导致的。<code>Action</code> 就是 <code>View</code> 发出的通知，表示 <code>State</code> 应该要发生变化了</p></blockquote><ul><li><code>Action</code> 是一个对象。其中的<code>type</code>属性是必须的，表示 <code>Action</code> 的名称。其他属性可以自由设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="string">'Learn Redux'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Action</code> 的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code></li><li>可以这样理解，<code>Action</code> 描述当前发生的事情。改变 <code>State</code> 的唯一办法，就是使用 <code>Action</code>。它会运送数据到 <code>Store</code></li></ul><blockquote><p><code>action</code>有两个作用，一个是定义我们的应用可以进行的动作或操作的类型，另一个是传递改变应用状态的数据。在<code>Redux</code>的约定中，<code>action</code>只有<code>type</code>属性是必须包含的，其他的数据如何定义全在于你想要如何使用，当然如果你希望你定义的<code>action</code>能够规范一些的话，也可以遵从Flux Standard Action的标准</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// action 类型</span></span><br><span class="line">  type: <span class="string">'INCREMENT'</span>,</span><br><span class="line">  <span class="comment">// payload 中返回我们要传递的数据，用来修改应用 state</span></span><br><span class="line">  payload: &#123;</span><br><span class="line">    num: <span class="number">1</span>  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// payload 数据未获取成功时返回 true</span></span><br><span class="line">  error: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 一些不必要在 payload 中传递的其他数据</span></span><br><span class="line">  meta: &#123;</span><br><span class="line">    success: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Action Creator</strong></p><blockquote><p><code>View</code> 要发送多少种消息，就会有多少种 <code>Action</code>。如果都手写，会很麻烦。可以定义一个函数来生成 <code>Action</code>，这个函数就叫 <code>Action Creator</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'添加 TODO'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Learn Redux'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>addTodo</code>函数就是一个 <code>Action Creator</code></p></blockquote><p><strong>store.dispatch()</strong></p><blockquote><p><code>store.dispatch()</code>是 <code>View</code> 发出 <code>Action</code> 的唯一方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(fn);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="string">'Learn Redux'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>store.dispatch</code>接受一个 <code>Action</code> 对象作为参数，将它发送出去</p></blockquote><ul><li>结合 <code>Action Creator</code>，这段代码可以改写如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn Redux'</span>));</span><br></pre></td></tr></table></figure><p><strong>Reducer</strong></p><blockquote><p><code>Store</code> 收到 <code>Action</code> 以后，必须给出一个新的 <code>State</code>，这样 <code>View</code> 才会发生变化。这种 <code>State</code> 的计算过程就叫做 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> new_state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>整个应用的初始状态，可以作为 <code>State</code> 的默认值。下面是一个实际的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.payload;</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reducer(<span class="number">1</span>, &#123;</span><br><span class="line">  type: <span class="string">'ADD'</span>,</span><br><span class="line">  payload: <span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>reducer</code>函数收到名为<code>ADD</code>的 <code>Action</code> 以后，就返回一个新的 <code>State</code>，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 <code>Action</code> 的不同来实现</p></blockquote><ul><li>实际应用中，<code>Reducer</code> 函数不用像上面这样手动调用，<code>store.dispatch</code>方法会触发 <code>Reducer</code> 的自动执行</li><li>为此，<code>Store</code> 需要知道 <code>Reducer</code> 函数，做法就是在生成 <code>Store</code> 的时候，将 <code>Reducer</code> 传入<code>createStore</code>方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class="line">const store = createStore(reducer);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>createStore</code>接受 <code>Reducer</code> 作为参数，生成一个新的 <code>Store</code>。以后每当<code>store.dispatch</code>发送过来一个新的 <code>Action</code>，就会自动调用 <code>Reducer</code>，得到新的 <code>State</code></li><li>为什么这个函数叫做 <code>Reducer</code>呢？因为它可以作为数组的<code>reduce</code>方法的参数</li></ul><p><strong>纯函数</strong></p><ul><li><code>Reducer</code> 函数最重要的特征是，它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出</li><li>纯函数是函数式编程的概念，必须遵守以下一些约束<ul><li>不得改写参数</li><li>不能调用系统 <code>I/O</code> 的<code>API</code></li><li>不能调用<code>Date.now()</code>或者<code>Math.random()</code>等不纯的方法，因为每次会得到不一样的结果</li></ul></li></ul><blockquote><p>由于 <code>Reducer</code> 是纯函数，就可以保证同样的<code>State</code>，必定得到同样的 <code>View</code>。但也正因为这一点，<code>Reducer</code> 函数里面不能改变 <code>State</code>，必须返回一个全新的对象，请参考下面的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// State 是一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; thingToChange &#125;);</span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, ...newState &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State 是一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...state, newItem];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最好把 <code>State</code> 对象设成只读。你没法改变它，要得到新的 <code>State</code>，唯一办法就是生成一个新对象。这样的好处是，任何时候，与某个 <code>View</code> 对应的 <code>State</code> 总是一个不变的对象</p></blockquote><p><strong>store.subscribe()</strong></p><blockquote><p><code>Store</code> 允许使用<code>store.subscribe</code>方法设置监听函数，一旦 <code>State</code> 发生变化，就自动执行这个函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><blockquote><p>显然，只要把 <code>View</code> 的更新函数（对于 <code>React</code> 项目，就是组件的<code>render</code>方法或<code>setState</code>方法）放入<code>listen</code>，就会实现 <code>View</code> 的自动渲染</p></blockquote><ul><li><code>store.subscribe</code>方法返回一个函数，调用这个函数就可以解除监听</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">unsubscribe();</span><br></pre></td></tr></table></figure><h3 id="9-3-Reducer-的拆分"><a href="#9-3-Reducer-的拆分" class="headerlink" title="9.3 Reducer 的拆分"></a>9.3 Reducer 的拆分</h3><blockquote><p><code>Reducer</code> 函数负责生成 <code>State</code>。由于整个应用只有一个 <code>State</code> 对象，包含所有数据，对于大型应用来说，这个 State 必然十分庞大，导致 <code>Reducer</code> 函数也十分庞大</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_CHAT:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        chatLog: state.chatLog.concat(payload)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> CHANGE_STATUS:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        statusMessage: payload</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> CHANGE_USERNAME:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        userName: payload</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    chatLog: chatLog(state.chatLog, action),</span><br><span class="line">    statusMessage: statusMessage(state.statusMessage, action),</span><br><span class="line">    userName: userName(state.userName, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Reducer</code> 函数被拆成了三个小函数，每一个负责生成对应的属</li><li>这样一拆，<code>Reducer</code> 就易读易写多了。而且，这种拆分与 <code>React</code> 应用的结构相吻合:一个 <code>React</code> 根组件由很多子组件构成。这就是说，子组件与子 <code>Reducer</code> 完全可以对应</li></ul><blockquote><p><code>Redux</code> 提供了一个<code>combineReducers</code>方法，用于 <code>Reducer</code> 的拆分。你只要定义各个子 <code>Reducer</code> 函数，然后用这个方法，将它们合成一个大的 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chatReducer = combineReducers(&#123;</span><br><span class="line">  chatLog,</span><br><span class="line">  statusMessage,</span><br><span class="line">  userName</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp;</span><br></pre></td></tr></table></figure><blockquote><p>这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: doSomethingWithA(state.a, action),</span><br><span class="line">    b: processB(state.b, action),</span><br><span class="line">    c: c(state.c, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总之，<code>combineReducers()</code>做的就是产生一个整体的 Reducer 函数。该函数根据 <code>State</code> 的 <code>key</code> 去执行相应的子 <code>Reducer</code>，并将返回结果合并成一个大的 <code>State</code> 对象</p></blockquote><ul><li>你可以把所有子 <code>Reducer</code> 放在一个文件里面，然后统一引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(reducers)</span><br></pre></td></tr></table></figure><h3 id="9-4-工作流程"><a href="#9-4-工作流程" class="headerlink" title="9.4 工作流程"></a>9.4 工作流程</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-72a33d9e42602972.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3e80b99c89f6aa4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d741057955c632ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="react组件+redux单向数据流"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5c6d10572cc20356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端异步请求用例"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a42fb9019138c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PFAT如何解决前端异步请求的用例？"></p><ul><li>首先，用户发出 <code>Action</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure><ul><li>然后，<code>Store</code> 自动调用 <code>Reducer</code>，并且传入两个参数：当前 <code>State</code> 和收到的 <code>Action</code>。 <code>Reducer</code> 会返回新的 <code>State</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nextState = todoApp(previousState, action);</span><br></pre></td></tr></table></figure><ul><li><code>State</code> 一旦有变化，<code>Store</code> 就会调用监听函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置监听函数</span></span><br><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><ul><li><code>listener</code>可以通过<code>store.getState()</code>得到当前状态。如果使用的是 <code>React</code>，这时可以触发重新渲染 <code>View</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listerner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newState = store.getState();</span><br><span class="line">  component.setState(newState);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5-实例：计数器"><a href="#9-5-实例：计数器" class="headerlink" title="9.5 实例：计数器"></a>9.5 实例：计数器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123; value, onIncrement, onDecrement &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;value&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick=&#123;onIncrement&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick=&#123;onDecrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const reducer = (state = 0, action) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'INCREMENT': return state + 1;</span></span><br><span class="line"><span class="regexp">    case 'DECREMENT': return state - 1;</span></span><br><span class="line"><span class="regexp">    default: return state;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const store = createStore(reducer);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const render = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Counter</span></span><br><span class="line"><span class="regexp">      value=&#123;store.getState()&#125;</span></span><br><span class="line"><span class="regexp">      onIncrement=&#123;() =&gt; store.dispatch(&#123;type: 'INCREMENT'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">      onDecrement=&#123;() =&gt; store.dispatch(&#123;type: 'DECREMENT'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">    /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">store.subscribe(render);</span><br></pre></td></tr></table></figure><h2 id="十、中间件与异步操作"><a href="#十、中间件与异步操作" class="headerlink" title="十、中间件与异步操作"></a>十、中间件与异步操作</h2><blockquote><p><code>Redux</code> 的基本做法：用户发出 <code>Action</code>，<code>Reducer</code> 函数算出新的 <code>State</code>，<code>View</code> 重新渲染</p></blockquote><ul><li><p>一个关键问题没有解决：异步操作怎么办？<code>Action</code> 发出以后，<code>Reducer</code> 立即算出 <code>State</code>，这叫做同步；<code>Action</code> 发出以后，过一段时间再执行 <code>Reducer</code>，这就是异步</p></li><li><p>怎么才能 <code>Reducer</code> 在异步操作结束后自动执行呢？这就要用到新的工具：中间件（<code>middleware</code>）</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-34a7ad88469625f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="10-1-中间件的概念"><a href="#10-1-中间件的概念" class="headerlink" title="10.1 中间件的概念"></a>10.1 中间件的概念</h3><blockquote><p>中间件就是一个函数，对<code>store.dispatch</code>方法进行了改造，在发出 <code>Action</code> 和执行 <code>Reducer</code> 这两步之间，添加了其他功能。</p></blockquote><h3 id="10-2-中间件的用法"><a href="#10-2-中间件的用法" class="headerlink" title="10.2 中间件的用法"></a>10.2 中间件的用法</h3><blockquote><p>常用的中间件都有现成的，只要引用别人写好的模块即可。比如日志中间件，就有现成的<code>redux-logger</code>模块</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"><span class="keyword">const</span> logger = createLogger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>redux-logger</code>提供一个生成器<code>createLogger</code>，可以生成日志中间件<code>logger</code>。然后，将它放在applyMiddleware方法之中，传入<code>createStore</code>方法，就完成了<code>store.dispatch()</code>的功能增强</p></blockquote><p><strong>这里有两点需要注意</strong></p><ul><li>（1）<code>createStore</code>方法可以接受整个应用的初始状态作为参数，那样的话，<code>applyMiddleware</code>就是第三个参数了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  initial_state,</span><br><span class="line">  applyMiddleware(logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>（2）中间件的次序有讲究</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk, promise, logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>applyMiddleware</code>方法的三个参数，就是三个中间件。有的中间件有次序要求，使用前要查一下文档。比如，<code>logger</code>就一定要放在最后，否则输出结果会不正确</p></blockquote><h3 id="10-3、applyMiddlewares"><a href="#10-3、applyMiddlewares" class="headerlink" title="10.3、applyMiddlewares()"></a>10.3、applyMiddlewares()</h3><blockquote><p><code>applyMiddlewares</code>这个方法。它是 <code>Redux</code> 的原生方法，作用是将所有中间件组成一个数组，依次执行</p></blockquote><h3 id="10-4-异步操作的基本思路"><a href="#10-4-异步操作的基本思路" class="headerlink" title="10.4 异步操作的基本思路"></a>10.4 异步操作的基本思路</h3><blockquote><p>理解了中间件以后，就可以处理异步操作了</p></blockquote><ul><li>同步操作只要发出一种 <code>Action</code> 即可，异步操作的差别是它要发出三种 <code>Action</code><ul><li>操作发起时的 <code>Action</code></li><li>操作成功时的 <code>Action</code></li><li>操作失败时的 <code>Action</code></li></ul></li></ul><blockquote><p>以向服务器取出数据为例，三种 <code>Action</code> 可以有两种不同的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一：名称相同，参数不同</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>, <span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">error</span>: <span class="string">'Oops'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>, <span class="attr">status</span>: <span class="string">'success'</span>, <span class="attr">response</span>: &#123; ... &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二：名称不同</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_REQUEST'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_FAILURE'</span>, <span class="attr">error</span>: <span class="string">'Oops'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_SUCCESS'</span>, <span class="attr">response</span>: &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了 <code>Action</code>种类不同，异步操作的 <code>State</code> 也要进行改造，反映不同的操作状态。下面是 <code>State</code> 的一个例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  isFetching: <span class="literal">true</span>,</span><br><span class="line">  didInvalidate: <span class="literal">true</span>,</span><br><span class="line">  lastUpdated: <span class="string">'xxxxxxx'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>State</code> 的属性<code>isFetching</code>表示是否在抓取数据。<code>didInvalidate</code>表示数据是否过时，<code>lastUpdated</code>表示上一次更新时间</p><p>现在，整个异步操作的思路就很清楚了</p></blockquote><ul><li>操作开始时，送出一个 <code>Action</code>，触发 <code>State</code> 更新为”正在操作”状态，<code>View</code> 重新渲染</li><li>操作结束后，再送出一个 <code>Action</code>，触发 <code>State</code> 更新为”操作结束”状态，<code>View</code> 再一次重新渲染</li></ul><h3 id="10-5-redux-thunk-中间件"><a href="#10-5-redux-thunk-中间件" class="headerlink" title="10.5 redux-thunk 中间件"></a>10.5 redux-thunk 中间件</h3><blockquote><p>异步操作至少要送出两个 <code>Action</code>：用户触发第一个 <code>Action</code>，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 <code>Action</code> 呢</p></blockquote><ul><li>奥妙就在 <code>Action Creator</code> 之中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    dispatch(fetchPosts(selectedPost))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码是一个异步组件的例子。加载成功后（<code>componentDidMount</code>方法），它送出了（<code>dispatch</code>方法）一个 <code>Action</code>，向服务器要求数据 <code>fetchPosts(selectedSubreddit)</code>。这里的<code>fetchPosts</code>就是 <code>Action Creator</code></p></blockquote><ul><li>下面就是<code>fetchPosts</code>的代码，关键之处就在里面</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-f0de2f9655fe28f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPosts = <span class="function"><span class="params">postTitle</span> =&gt;</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">  dispatch(requestPosts(postTitle));</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receivePosts(postTitle, json)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法一</span></span><br><span class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>));</span><br><span class="line"><span class="comment">// 使用方法二</span></span><br><span class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>fetchPosts</code>是一个<code>Action Creator</code>（动作生成器），返回一个函数。这个函数执行后，先发出一个<code>Action（requestPosts(postTitle)</code>），然后进行异步操作。拿到结果后，先将结果转成 <code>JSON</code> 格式，然后再发出一个 <code>Action（ receivePosts(postTitle, json)</code>）</p></blockquote><p><strong>上面代码中，有几个地方需要注意</strong></p><ul><li><code>fetchPosts</code>返回了一个函数，而普通的 <code>Action Creator</code> 默认返回一个对象</li><li>返回的函数的参数是<code>dispatch</code>和<code>getState</code>这两个 <code>Redux</code>方法，普通的<code>Action Creator</code>的参数是 <code>Action</code> 的内容</li><li>在返回的函数之中，先发出一个 <code>Action（requestPosts(postTitle)）</code>，表示操作开始</li><li>异步操作结束之后，再发出一个 <code>Action（receivePosts(postTitle, json)）</code>，表示操作结束</li></ul><blockquote><p>这样的处理，就解决了自动发送第二个 <code>Action</code> 的问题。但是，又带来了一个新的问题，<code>Action</code> 是由<code>store.dispatch</code>方法发送的。而<code>store.dispatch</code>方法正常情况下，参数只能是对象，不能是函数</p></blockquote><ul><li>这时，就要使用中间件<code>redux-thunk</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: this API requires redux@&gt;=3.1.0</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>上面代码使用<code>redux-thunk</code>中间件，改造<code>store.dispatch</code>，使得后者可以接受函数作为参数</li></ul><p><strong>因此，异步操作的第一种解决方案就是，写出一个返回函数的 <code>Action Creator</code>，然后使用<code>redux-thunk</code>中间件改造<code>store.dispatch</code></strong></p><h3 id="10-6、redux-promise-中间件"><a href="#10-6、redux-promise-中间件" class="headerlink" title="10.6、redux-promise 中间件"></a>10.6、redux-promise 中间件</h3><hr><blockquote><p>既然 <code>Action Creator</code> 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 <code>Action Creator</code> 返回一个 <code>Promise</code> 对象</p></blockquote><ul><li>这就需要使用<code>redux-promise</code>中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">'redux-promise'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(promiseMiddleware)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>这个中间件使得<code>store.dispatch</code>方法可以接受 <code>Promise</code> 对象作为参数。这时，<code>Action Creator</code> 有两种写法</p></blockquote><ul><li>写法一，返回值是一个 <code>Promise</code> 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPosts = </span><br><span class="line">  (dispatch, postTitle) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">     dispatch(requestPosts(postTitle));</span><br><span class="line">     <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">       .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">         type: <span class="string">'FETCH_POSTS'</span>,</span><br><span class="line">         payload: response.json()</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>写法二，<code>Action</code> 对象的<code>payload</code>属性是一个 <code>Promise</code> 对象。这需要从<code>redux-actions</code>模块引入<code>createAction</code>方法，并且写法也要变成下面这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 发出同步 Action</span></span><br><span class="line">    dispatch(requestPosts(selectedPost));</span><br><span class="line">    <span class="comment">// 发出异步 Action</span></span><br><span class="line">    dispatch(createAction(</span><br><span class="line">      <span class="string">'FETCH_POSTS'</span>, </span><br><span class="line">      fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，第二个<code>dispatch</code>方法发出的是异步 <code>Action</code>，只有等到操作结束，这个 <code>Action</code> 才会实际发出</li><li>注意，<code>createAction</code>的第二个参数必须是一个 <code>Promise</code> 对象</li></ul><h2 id="十一、react-redux"><a href="#十一、react-redux" class="headerlink" title="十一、react-redux"></a>十一、react-redux</h2><blockquote><ul><li>为了方便使用，<code>Redux</code> 的作者封装了一个 <code>React</code>专用的库 <code>React-Redux</code></li><li>这个库是可以选用的。实际项目中，你应该权衡一下，是直接使用 <code>Redux</code>，还是使用 <code>React-Redux</code>。后者虽然提供了便利，但是需要掌握额外的 <code>API</code>，并且要遵守它的组件拆分规范</li></ul></blockquote><h3 id="11-1-UI-组件"><a href="#11-1-UI-组件" class="headerlink" title="11.1 UI 组件"></a>11.1 UI 组件</h3><blockquote><p><code>React-Redux</code> 将所有组件分成两大类：<code>UI</code> 组件（<code>presentational component</code>）和容器组件（<code>container component</code>）</p></blockquote><p><strong>UI 组件有以下几个特征</strong></p><ul><li>只负责 <code>UI</code> 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用<code>this.state</code>这个变量）</li><li>所有数据都由参数（<code>this.props</code>）提供</li><li>不使用任何 <code>Redux</code> 的 <code>API</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> Title =</span><br><span class="line">  value =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>因为不含有状态，<code>UI</code> 组件又称为”纯组件”，即它纯函数一样，纯粹由参数决定它的值</p></blockquote><h3 id="11-2、容器组件"><a href="#11-2、容器组件" class="headerlink" title="11.2、容器组件"></a>11.2、容器组件</h3><ul><li>负责管理数据和业务逻辑，不负责 <code>UI</code> 的呈现</li><li>带有内部状态</li><li>使用 <code>Redux</code> 的 <code>API</code></li></ul><p><strong><code>UI</code> 组件负责 <code>UI</code> 的呈现，容器组件负责管理数据和逻辑</strong></p><blockquote><p>如果一个组件既有 <code>UI</code> 又有业务逻辑，那怎么办？回答是，将它拆分成下面的结构：外面是一个容器组件，里面包了一个<code>UI</code> 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图</p></blockquote><ul><li><code>React-Redux</code> 规定，所有的 <code>UI</code> 组件都由用户提供，容器组件则是由 <code>React-Redux</code> 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它</li></ul><h3 id="11-3、connect"><a href="#11-3、connect" class="headerlink" title="11.3、connect()"></a>11.3、connect()</h3><blockquote><p><code>React-Redux</code> 提供<code>connect</code>方法，用于从 <code>UI</code> 组件生成容器组件。<code>connect</code>的意思，就是将这两种组件连起来。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect()(TodoList);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>TodoList</code>是 <code>UI</code> 组件，<code>VisibleTodoList</code>就是由 <code>React-Redux</code> 通过<code>connect</code>方法自动生成的容器组件</li></ul><blockquote><p>但是，因为没有定义业务逻辑，上面这个容器组件毫无意义，只是 <code>UI</code> 组件的一个单纯的包装层。为了定义业务逻辑，需要给出下面两方面的信息。</p></blockquote><ul><li>（1）输入逻辑：外部的数据（即<code>state</code>对象）如何转换为 <code>UI</code> 组件的参数</li><li>（2）输出逻辑：用户发出的动作如何变为 <code>Action</code> 对象，从 <code>UI</code> 组件传出去</li></ul><blockquote><p>因此，<code>connect</code>方法的完整 <code>API</code> 如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>connect</code>方法接受两个参数<code>：mapStateToProps</code>和<code>mapDispatchToProps</code>。它们定义了 <code>UI</code> 组件的业务逻辑。前者负责输入逻辑，即将<code>state</code>映射到 <code>UI</code> 组件的参数（<code>props</code>），后者负责输出逻辑，即将用户对 <code>UI</code> 组件的操作映射成 <code>Action</code></p></blockquote><h3 id="11-4、mapStateToProps"><a href="#11-4、mapStateToProps" class="headerlink" title="11.4、mapStateToProps()"></a>11.4、mapStateToProps()</h3><blockquote><p><code>mapStateToProps</code>是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）<code>state</code>对象到（<code>UI</code> 组件的）<code>props</code>对象的映射关系</p></blockquote><ul><li>作为函数，<code>mapStateToProps</code>执行后应该返回一个对象，里面的每一个键值对就是一个映射</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>mapStateToProps</code>是一个函数，它接受<code>state</code>作为参数，返回一个对象</li><li>这个对象有一个<code>todos</code>属性，代表 <code>UI</code> 组件的同名参数，后面的<code>getVisibleTodos</code>也是一个函数，可以从<code>state</code>算出 <code>todos</code> 的值</li></ul><blockquote><p>下面就是<code>getVisibleTodos</code>的一个例子，用来算出<code>todos</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (filter) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown filter: '</span> + filter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mapStateToProps</code>会订阅 <code>Store</code>，每当<code>state</code>更新的时候，就会自动执行，重新计算 <code>UI</code> 组件的参数，从而触发 <code>UI</code> 组件的重新渲染</li><li><code>mapStateToProps</code>的第一个参数总是<code>state</code>对象，还可以使用第二个参数，代表容器组件的<code>props</code>对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器组件的代码</span></span><br><span class="line"><span class="comment">//    &lt;FilterLink filter="SHOW_ALL"&gt;</span></span><br><span class="line"><span class="comment">//      All</span></span><br><span class="line"><span class="comment">//    &lt;/FilterLink&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    active: ownProps.filter === state.visibilityFilter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>ownProps</code>作为参数后，如果容器组件的参数发生变化，也会引发 <code>UI</code> 组件重新渲染</p></blockquote><ul><li><code>connect</code>方法可以省略<code>mapStateToProps</code>参数，那样的话，<code>UI</code> 组件就不会订阅<code>Store</code>，就是说 <code>Store</code> 的更新不会引起 <code>UI</code> 组件的更新</li></ul><h3 id="11-5、mapDispatchToProps"><a href="#11-5、mapDispatchToProps" class="headerlink" title="11.5、mapDispatchToProps()"></a>11.5、mapDispatchToProps()</h3><blockquote><p><code>mapDispatchToProps</code>是<code>connect</code>函数的第二个参数，用来建立 <code>UI</code> 组件的参数到<code>store.dispatch</code>方法的映射</p></blockquote><ul><li>也就是说，它定义了哪些用户的操作应该当作 <code>Action</code>，传给 <code>Store</code>。它可以是一个函数，也可以是一个对象</li><li>如果<code>mapDispatchToProps</code>是一个函数，会得到<code>dispatch</code>和<code>ownProps</code>（容器组件的<code>props</code>对象）两个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = (</span><br><span class="line">  dispatch,</span><br><span class="line">  ownProps</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">        filter: ownProps.filter</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从上面代码可以看到，<code>mapDispatchToProps</code>作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了 <code>UI</code> 组件的参数怎样发出 <code>Action</code></li><li>如果<code>mapDispatchToProps</code>是一个对象，它的每个键名也是对应 <code>UI</code> 组件的同名参数，键值应该是一个函数，会被当作 <code>Action creator</code> ，返回的 <code>Action</code> 会由 <code>Redux</code> 自动发出。举例来说，上面的<code>mapDispatchToProps</code>写成对象就是下面这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  onClick: <span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">    filter: filter</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6、-组件"><a href="#11-6、-组件" class="headerlink" title="11.6、 组件"></a>11.6、<provider> 组件</provider></h3><blockquote><p><code>connect</code>方法生成容器组件以后，需要让容器组件拿到<code>state</code>对象，才能生成 <code>UI</code> 组件的参数</p><p>一种解决方法是将<code>state</code>对象作为参数，传入容器组件。但是，这样做比较麻烦，尤其是容器组件可能在很深的层级，一级级将<code>state</code>传下去就很麻烦。</p></blockquote><ul><li><code>React-Redux</code> 提供<code>Provider</code>组件，可以让容器组件拿到<code>state</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Provider</code>在根组件外面包了一层，这样一来，<code>App</code>的所有子组件就默认都可以拿到<code>state</code></li><li>它的原理是<code>React</code>组件的<code>context</code>属性</li></ul><h3 id="11-7、实例：计数器"><a href="#11-7、实例：计数器" class="headerlink" title="11.7、实例：计数器"></a>11.7、实例：计数器</h3><blockquote><p>我们来看一个实例。下面是一个计数器组件，它是一个纯的 <code>UI</code> 组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个 <code>UI</code> 组件有两个参数：<code>value</code>和<code>onIncreaseClick</code>。前者需要从<code>state</code>计算得到，后者需要向外发出 <code>Action</code></p></blockquote><ul><li>接着，定义<code>value</code>到<code>state</code>的映射，以及<code>onIncreaseClick</code>到<code>dispatch</code>的映射</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value: state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onIncreaseClick: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(increaseAction)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="keyword">const</span> increaseAction = &#123; <span class="attr">type</span>: <span class="string">'increase'</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后，使用<code>connect</code>方法生成容器组件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const App = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><blockquote><p>然后，定义这个组件的 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = state.count</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后，生成<code>store</code>对象，并使用<code>Provider</code>在根组件外面包一层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncreaseClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Action</span></span><br><span class="line"><span class="regexp">const increaseAction = &#123; type: 'increase' &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Reducer</span></span><br><span class="line"><span class="regexp">function counter(state = &#123; count: 0 &#125;, action) &#123;</span></span><br><span class="line"><span class="regexp">  const count = state.count</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'increase':</span></span><br><span class="line"><span class="regexp">      return &#123; count: count + 1 &#125;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Store</span></span><br><span class="line"><span class="regexp">const store = createStore(counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux state to component props</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    value: state.count</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux actions to component props</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    onIncreaseClick: () =&gt; dispatch(increaseAction)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Connected Component</span></span><br><span class="line"><span class="regexp">const App = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="十二、思维导图总结"><a href="#十二、思维导图总结" class="headerlink" title="十二、思维导图总结"></a>十二、思维导图总结</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d20b7699e8d0624c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、npm的配置&quot;&gt;&lt;a href=&quot;#一、npm的配置&quot; class=&quot;headerlink&quot; title=&quot;一、npm的配置&quot;&gt;&lt;/a&gt;一、npm的配置&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原生数组及高阶函数</title>
    <link href="http://blog.poetries.top/2017/11/07/js-some-filter-reduce/"/>
    <id>http://blog.poetries.top/2017/11/07/js-some-filter-reduce/</id>
    <published>2017-11-07T10:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>有返回值，返回一个新的数组，每个元素为调用<code>func</code>的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> other = list.map(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote><p>有返回值，返回一个符合<code>func</code>条件的元素数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> other = list.filter(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d % <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h2 id="reduce和reduceRight"><a href="#reduce和reduceRight" class="headerlink" title="reduce和reduceRight"></a>reduce和reduceRight</h2><blockquote><p><code>.reduce</code>从左到右而<code>.reduceRight</code>从右到左循环遍历数组，每次调用接收目前为止的部分结果和当前遍历的值</p></blockquote><ul><li>两种方法都有如下典型用法：<code>.reduce(callback(previousValue, currentValue, index, array), initialValue)</code>。</li><li><code>previousValue</code>是最后被调用的回调函数的返回值，<code>initialValue</code>是开始时<code>previousValue</code>被初始化的值。<code>currentValue</code></li><li>是当前被遍历的元素值，<code>index</code>是当前元素在数组中的索引值。<code>array</code>是对调用<code>.reduce</code>数组的简单引用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>].sum()</span><br><span class="line"><span class="comment">// &lt;- 28</span></span><br></pre></td></tr></table></figure><blockquote><p>可以使用<code>.reduce</code>作为对象的字符串生成器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (partial) &#123;</span><br><span class="line">            partial += <span class="string">', '</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'George'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Sam'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Pear'</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &lt;- 'George, Sam, Pear'</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><blockquote><p>返回一个<code>boolean</code>，判断是否有元素符合<code>func</code>条件，如果有一个元素符合<code>func</code>条件，则循环会终止</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.some(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2 4,3</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><blockquote><p><code>Array.prototype.sort(fn(a,b))</code>需要一个包含两个测试参数的回调函数，并且要产生一下三种返回值之一</p></blockquote><ul><li>如果<code>a</code>在<code>b</code>前，则返回值小于零</li><li>如果<code>a</code>和`b是等价的，则返回值等于零</li><li>如果<code>a</code>在<code>b</code>后，则返回值大于零</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">9</span>,<span class="number">80</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>].sort()</span><br><span class="line"><span class="comment">// &lt;- [10, 3, 5, 6, 80, 9]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">9</span>,<span class="number">80</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &lt;- [3, 5, 6, 9, 10, 80]</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><blockquote><p>返回一个<code>boolean</code>，判断每个元素是否符合<code>func</code>条件，有一个元素不满足<code>func</code>条件，则循环终止，返回<code>false</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.every(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ul><li>没有返回值，只针对每个元素调用<code>func</code>。</li><li>优点：代码简介。</li><li>缺点：无法使用<code>break</code>，<code>return</code>等终止循环</li></ul><blockquote><ul><li><code>value</code> 当前操作的数组元素</li><li>当前操作元素的数组索引</li><li><code>array</code> 当前数组的引用</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.forEach(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.push(d * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h2 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h2><blockquote><p><code>for-in</code>循环实际是为循环”enumerable“对象而设计的，<code>for in</code>也可以循环数组，但是不推荐这样使用，<code>for–in</code>是用来循环带有字符串<code>key</code>的对象的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  "obj.a = 1" "obj.b = 2" "obj.c = 3"</span></span><br></pre></td></tr></table></figure><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><blockquote><p><code>for of</code>为<code>ES6</code>提供，具有<code>iterator</code>接口，就可以用<code>for of</code>循环遍历它的成员</p></blockquote><ul><li><code>for of</code>循环可以使用的范围包括数组、<code>Set</code>和<code>Map</code>结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code>对象）、后文的<code>Generator</code>对象，以及字符串</li></ul><p><strong>entries</strong></p><blockquote><p><code>entries()</code> 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于<code>Set</code>，键名与键值相同。<code>Map</code>结构的<code>iterator</code>接口，默认就是调用<code>entries</code>方法</p></blockquote><p><strong>keys</strong></p><ul><li><code>keys()</code> 返回一个遍历器对象，用来遍历所有的键名。</li></ul><p><strong>values</strong></p><ul><li><code>values()</code>返回一个遍历器对象，用来遍历所有的键值。 </li></ul><blockquote><p>这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print: 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  a 1 b 2 c 3</span></span><br><span class="line"><span class="comment">//说明：对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。</span></span><br><span class="line"><span class="comment">//一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有返回值，返回一个新的数组，每个元素为调用&lt;code&gt;func&lt;/code&gt;的结果&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="高阶函数" scheme="http://blog.poetries.top/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局适配方案</title>
    <link href="http://blog.poetries.top/2017/11/05/mobile-layout/"/>
    <id>http://blog.poetries.top/2017/11/05/mobile-layout/</id>
    <published>2017-11-05T07:35:08.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么要做适配"><a href="#一、为什么要做适配" class="headerlink" title="一、为什么要做适配"></a>一、为什么要做适配</h2><ul><li>为了适应各种移动端设备，完美呈现应有的布局效果  </li><li>各个移动端设备，分辨率大小不一致，网页想铺满整个屏幕，并在各种分辨下等比缩放</li></ul><h2 id="二、适配方案"><a href="#二、适配方案" class="headerlink" title="二、适配方案"></a>二、适配方案</h2><ul><li>固定高度，宽度百分比适配-布局非常均匀，适合百分比布局    </li><li>固定宽度，改变缩放比例适配-什么情况都可以</li><li><code>Rem</code>适配</li><li>像素比适配</li></ul><h2 id="三、单位"><a href="#三、单位" class="headerlink" title="三、单位"></a>三、单位</h2><ul><li><code>em</code>根据元素自身的字体大小计算,元素自身 <code>16px</code> <code>1em=16px</code></li><li><code>Rem</code>  <code>R -&gt; root</code> 根节点( <code>html</code> ) 根据<code>html</code>的字体大小计算其他元素尺寸</li></ul><h2 id="四、百分比适配-常用"><a href="#四、百分比适配-常用" class="headerlink" title="四、百分比适配(常用)"></a>四、百分比适配(常用)</h2><blockquote><p>固定高度，宽度百分比适配</p></blockquote><ul><li>根据设置的大小去设置高度，单位可以用<code>px</code> 百分比 <code>auto</code> </li><li>常用<code>Flex</code>布局</li><li>百分比宽度</li></ul><blockquote><p>以<code>640</code>设计稿为例，在外层容器上设置最大以及最小的宽</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">640px</span>; <span class="comment">/*设置设计稿的宽度*/</span></span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后面的区块布局都用百分比，具体元素大小用<code>px</code>计算</p></blockquote><ul><li>也就是宽度用百分比，高度用<code>px</code></li><li>高度以及图片不要定死，让它自动撑开</li></ul><h2 id="五、Rem适配-常用"><a href="#五、Rem适配-常用" class="headerlink" title="五、Rem适配(常用)"></a>五、Rem适配(常用)</h2><ul><li>根据屏幕的分辨率动态设置<code>html</code>的文字大小，达到等比缩放的功能</li><li>保证<code>html</code>最终算出来的字体大小，不能小于<code>12px</code></li><li>在不同的移动端显示不同的元素比例效果</li><li>如果<code>html</code>的<code>font-size:20px</code>的时候，那么此时的<code>1rem = 20px</code></li><li><p>把设计图的宽度分成多少分之一，根据实际情况</p></li><li><p><code>rem</code>做盒子的宽度，<code>viewport</code>缩放</p></li></ul><blockquote><p><code>head</code>加入常见的<code>meta</code>属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是关键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0，minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>把这段代码加入<code>head</code>中的<code>script</code>预先加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rem适配用这段代码动态计算html的font-size大小</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = win.document.documentElement;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">750</span>) &#123; <span class="comment">// 750是设计稿大小</span></span><br><span class="line">            width = <span class="number">750</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fontS = width / <span class="number">10</span>; <span class="comment">// 把设备宽度十等分 1rem=10px</span></span><br><span class="line">        docEl.style.fontSize = fontS + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    win.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(changeRem, <span class="number">30</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    win.addEventListener(<span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123; <span class="comment">//清除缓存</span></span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = setTimeout(changeRem, <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    changeRem();</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><ul><li>或者使用淘宝提供的库 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="external">https://github.com/amfe/lib-flexible</a></li></ul><p><strong>布局细节</strong></p><ul><li>结构用<code>section</code>区块划分更语义化</li><li>然后在<code>body</code>设置宽度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后面的区块都以百分比布局</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span>,</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把视觉稿中的 px 转换成 rem</strong></p><blockquote><p>首先，目前日常工作当中，视觉设计师给到前端开发人员手中的视觉稿尺寸一般是基于 <code>640px</code> 、 <code>750px</code> 以及 <code>1125px</code> 宽度为准。甚至为什么？大家应该懂的（考虑<code>Retina</code>屏）</p><p>假定设计稿的大小为<code>750</code>，那么我们则将整个图分成<code>10</code>等份来看。<code>&lt;html&gt;</code> 对应的 <code>font-size</code>为<code>75px</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样一来，对于视觉稿上的元素尺寸换算，只需要原始的 <code>px</code>值 除以 <code>rem</code>基准值 即可</li></ul><blockquote><p>那么，我们现在就可以比对设计稿，比如设计稿中，有一个<code>div</code>元素，宽度，高度都为<code>20px</code>,那么我们这样写即可（可以用 <code>markman</code>标准设计稿的元素大小）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0.27rem</span>; <span class="comment">/*20/75*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.27rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态计算的<code>rem</code>最后会帮我们动态计算元素在不同屏幕下的宽高</li><li>对于设计稿上的每个元素的尺寸在设计稿大小已知的时候，我们需要测量出，然后在用测量的宽高除以设计稿<code>750</code>的十分之一也就是<code>75</code>,得到我们想要的<code>rem</code>。而<code>rem</code>是根据屏幕动态变化的，也就达到了适配的效果。也就是同一套设计稿运用在不同的设备上。</li></ul><blockquote><p>比如当我们切换到<code>320</code>设备大小的时候，这时候<code>1rem=32px;</code> <code>div</code>的像素实际是<code>0.27*32=8.64px</code> <code>0.27</code>是我们在已知设计稿是<code>750</code>的情况下计算出来的，<code>rem</code>用来动态计算而已</p></blockquote><ul><li>对于<code>margin</code> <code>padding</code> <code>line-height</code> <code>width</code> <code>height</code>使用<code>rem</code>计算</li></ul><p><strong>如何快速计算</strong></p><blockquote><p>在实际生产当中，如果每一次计算 <code>px</code> 转换 <code>rem</code> ，或许会觉得非常麻烦</p></blockquote><ul><li><a href="https://github.com/flashlizi/cssrem" target="_blank" rel="external"><code>CSSREM</code></a> 是一个<code>CSS</code>的 <code>px</code> 值转 <code>rem</code> 值的<code>Sublime Text3</code>自动完成插件</li><li>插件效果</li></ul><p><img src="https://github.com/poetries/cssrem/raw/master/cssrem.gif" alt=""></p><blockquote><p>插件使用方法</p></blockquote><ul><li><p>安装</p><ul><li>下载本项目，比如：git clone <a href="https://github.com/flashlizi/cssrem" target="_blank" rel="external">https://github.com/flashlizi/cssrem</a></li><li>进入<code>packages</code>目录：<code>Sublime Text</code> -&gt; <code>Preferences</code> -&gt; <code>Browse Packages</code>…</li><li>复制下载的<code>cssrem</code>目录到刚才的packges目录里。</li><li>重启<code>Sublime Text</code></li></ul></li><li><p>配置参数</p><ul><li>参数配置文件：<code>Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem</code></li></ul><ul><li><code>px_to_rem</code> - <code>px</code>转<code>rem</code>的单位比例，默认为<code>40</code>【根据设计稿来设置，如设计稿<code>750</code>，我们取十分之一即<code>75</code>】。</li><li><code>max_rem_fraction_length</code> - <code>px</code>转<code>rem</code>的小数部分的最大长度。默认为<code>6</code>。</li><li><code>available_file_types</code> - 启用此插件的文件类型。默认为：[“<code>.css</code>“, “<code>.less</code>“, “<code>.sass</code>“]。</li></ul></li></ul><p><strong>文字适配的解决方案</strong></p><ul><li>对于一些标题性的文字，我们依然可以用<code>rem</code>。让他随着屏幕来进行缩放，因为标题性文字一般较大，而较大的文字，点阵对其影响就越小。这样，即使出现奇怪的尺寸，也能够让字体得到很好的渲染。</li><li>对于一些正文内容的文字（即站在使用者的角度，你不希望他进行缩放的文字）。我们采用<code>px</code>来进行处理</li></ul><h2 id="六、缩放比适配"><a href="#六、缩放比适配" class="headerlink" title="六、缩放比适配"></a>六、缩放比适配</h2><blockquote><p>固定宽度，改变缩放比例适配</p></blockquote><ul><li>设计图的宽度就是网页显示的宽度</li><li>改变视口的缩放比例</li><li>页面宽度固定死</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩放比例适配方案--用这个代码 </span></span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.screen.width,</span><br><span class="line">    fixedW = <span class="number">320</span>, <span class="comment">//设计稿宽度的一半</span></span><br><span class="line">    scale = width / fixedW, <span class="comment">// 缩放比例</span></span><br><span class="line">    meta = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>),</span><br><span class="line">    metaAttr = &#123;</span><br><span class="line">        name : <span class="string">'viewport'</span>,</span><br><span class="line">        content : <span class="string">'width='</span>+fixedW+<span class="string">', initial-scale='</span>+scale+<span class="string">', maximum-scale='</span>+scale+<span class="string">', user-scalable=0'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> metaAttr) &#123;</span><br><span class="line">        meta[key] = metaAttr[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(meta);</span><br></pre></td></tr></table></figure><h2 id="七、像素比适配"><a href="#七、像素比适配" class="headerlink" title="七、像素比适配"></a>七、像素比适配</h2><ul><li><code>window.devicePixelRatio</code></li><li>物理像素是手机屏幕分辨率 </li><li>独立像素 指<code>css</code>像素 屏幕宽度</li><li>像素比 = 物理像素 / <code>css宽度</code></li><li>获取设备的像素比    <code>window.devicePixelRatio</code></li></ul><h2 id="八、小结"><a href="#八、小结" class="headerlink" title="八、小结"></a>八、小结</h2><blockquote><p>关于移动端布局方案有很多，<code>rem</code>和百分比运用最多的</p></blockquote><p><strong>相关文章阅读</strong></p><ul><li><a href="https://www.tuicool.com/articles/nmm6reE" target="_blank" rel="external">使用Flexible实现手淘H5页面的终端适配</a></li><li><a href="http://liujinkai.com/2015/06/06/mobile-web-skill/" target="_blank" rel="external">移动端web开发技巧</a></li><li><a href="http://ymblog.net/2015/07/01/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFmeta%E6%A0%87%E7%AD%BE%E8%BD%AC/" target="_blank" rel="external">移动前端meta标签</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、为什么要做适配&quot;&gt;&lt;a href=&quot;#一、为什么要做适配&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要做适配&quot;&gt;&lt;/a&gt;一、为什么要做适配&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了适应各种移动端设备，完美呈现应有的布局效果  &lt;/li&gt;
&lt;li&gt;各
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap常用类小结</title>
    <link href="http://blog.poetries.top/2017/11/04/bootstrap-summary/"/>
    <id>http://blog.poetries.top/2017/11/04/bootstrap-summary/</id>
    <published>2017-11-04T14:55:24.000Z</published>
    <updated>2017-11-10T07:51:40.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网格选项"><a href="#网格选项" class="headerlink" title="网格选项"></a>网格选项</h2><p><strong><code>row</code></strong> :行</p><p><strong><code>col-*-*</code>: 列</strong></p><ul><li>第一个<code>*</code>可以为<code>xs[超小]</code>/<code>sm[小型]</code>/<code>md[中型]</code>/<code>lg[大型]</code></li><li>第二个<code>*</code>必须为<code>12</code>以内的[列数]</li></ul><p><strong><code>col-*-offset-*</code> :列偏移</strong></p><ul><li>第一个<code>*</code>和上面一样,第二个<code>*</code>范围是<code>1</code>到<code>11</code>,表示把该列的左外边距(<code>margin</code>)增加<code>*</code>列</li></ul><p><strong><code>col-*-*-*</code>:列排序</strong></p><ul><li>第一个<code>*</code>和上面一样</li><li>第二个<code>*</code>可以为<code>push</code>[向右]/<code>pull</code>[向左]</li><li>第三个<code>*</code>范围是<code>1</code>到<code>11</code>[列数]</li></ul><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><ul><li><code>small</code>:内联子标题</li><li><code>lead</code>:引导主体副本</li></ul><p><strong><code>text-*</code>:文本样式</strong></p><ul><li><p><code>*</code>号可以为<br><code>left[左对齐]</code>/<code>center[居中对齐]</code>/<code>right[右对齐]</code>/<code>muted[减弱文本]</code><br>/<code>primary</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code><br>/<code>justify</code>[自动换行]/<code>nowrap</code>[不换行]<br>/<code>lowercase</code>[小写]/<code>uppercase</code>[大写]/<code>capitalize</code>[首字母大写]</p></li><li><p><code>list-inline</code>:列表置于同一行</p></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><strong>table</strong>:基本样式(只有横向分隔线)</li><li><p><code>table-*</code>:表格样式</p><ul><li><code>*</code>可以为<code>striped[添加条纹]</code>/<code>bordered[添加边框]</code>/<code>hover[启用悬停]</code>/<code>condensed[更加紧凑]</code></li></ul></li><li><p><strong>tr/th/td 有</strong> </p><ul><li><code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code>来改变背景颜色</li></ul></li><li><p><strong>将任意的table放在table-responsive内,实现响应式表格</strong></p></li></ul><blockquote><p><code>bootstrap</code>里<code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code>对应的背景颜色</p></blockquote><p><img src="http://img.blog.csdn.net/20160530130233175" alt=""></p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p><strong>创建基本表单(垂直表单)的步骤</strong></p><ul><li>向父 <code>&lt;form&gt;</code> 元素添加 <code>role=&quot;form&quot;</code></li><li>把标签和控件放在一个带有<code>.form-group</code> 的 <code>&lt;div&gt;</code> 中。这是获取最佳间距所必需的</li><li>向所有的文本元素 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 添加<code>.form-control</code></li></ul><p><strong>创建水平表单的步骤</strong></p><ul><li>向父 <code>&lt;form&gt;</code> 元素添加  <code>.form-horizontal</code></li><li>把标签和控件放在一个带有 <code>.form-group</code> 的 <code>&lt;div&gt;</code> 中</li><li>向标签添加 <code>.control-label</code></li></ul><p><strong>常见的表单控件主要是</strong></p><blockquote><ul><li><code>input</code>、<code>textarea</code>、<code>checkbox</code>、<code>radio</code> 和 <code>select</code></li><li><code>input</code>: 声明<code>type</code>有<code>text</code>、<code>password</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>time</code>、<code>week</code>、 <code>number</code>、<code>email</code>、<code>url</code>、<code>search</code>、<code>tel</code> 和 <code>color</code></li></ul></blockquote><ul><li>对父元素添加验证状态<code>has-*:</code>验证样式(<code>*</code>可以为<code>warning</code>/<code>error</code>/<code>success</code>)</li></ul><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul><li><p><strong>btn:基本样式</strong></p></li><li><p><strong><code>btn-*</code></strong>:其他样式</p><ul><li><code>*</code>可以为<code>default</code>/<code>primary</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code><br>/<code>link</code>[让按钮看起来像个链接]/<code>lg</code>/<code>sm</code>/<code>xs</code>/<code>block</code>[块级按钮,拉伸至父元素100%的宽度]/<code>active</code>/<code>disabled</code></li></ul></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li><code>img-*</code>:图片样式(<code>*</code>可以为<code>rounded[圆角6px]</code><br>/<code>circle[圆形]</code><br>/<code>thumbnail</code>[添加内边距和一个灰色的边框]/<code>responsive</code>)</li></ul><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><blockquote><p><code>Bootstrap</code>里的一些辅助类,除了上面的<code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code> 还有 </p></blockquote><ul><li><code>pull-left</code>/<code>right</code> 元素浮动到左边/右边 </li><li><code>center-block</code> 设置元素为 <code>display:block</code> 并居中显示 </li><li><code>clearfix</code> 清除浮动 </li><li><p><code>show</code>/<code>hidden</code> 强制显示/隐藏</p></li><li><p><code>close</code> 显示关闭按钮 </p></li><li><code>caret</code> 显示下拉式功能 </li><li><code>divider</code> 分隔线</li></ul><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><blockquote><p>在 <code>fonts</code> 文件夹内可以找到字体图标，它包含了下列这些文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">glyphicons-halflings-regular.eot</span><br><span class="line">glyphicons-halflings-regular.svg</span><br><span class="line">glyphicons-halflings-regular.ttf</span><br><span class="line">glyphicons-halflings-regular.woff</span><br></pre></td></tr></table></figure><ul><li>图标参考：<a href="http://www.runoob.com/bootstrap/bootstrap-glyphicons.html" target="_blank" rel="external">http://www.runoob.com/bootstrap/bootstrap-glyphicons.html</a></li></ul><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><ul><li><p><code>dropdown</code>:下拉菜单</p></li><li><p><code>dropdown-menu</code>: 下拉菜单</p></li><li><p><code>dropdown-header</code>:下拉菜单区域标题</p></li></ul><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><ul><li><p><code>btn-group</code>:里面放置一系列<code>btn</code></p></li><li><p><code>btn-toolbar</code>:里面放置几组<code>btn-group</code></p></li><li><p><code>btn-group-*</code>:调整按钮组的样式(<code>*</code>可以为<code>xs</code>/<code>sm</code>/<code>lg</code>/<code>vertical</code>)</p></li><li><p><code>.btn-group</code> 容器添加 <code>.dropup</code>实现按钮上拉菜单</p></li></ul><h2 id="输入框组"><a href="#输入框组" class="headerlink" title="输入框组"></a>输入框组</h2><p><strong>向 .form-control 添加前缀或后缀元素的步骤</strong></p><ul><li>把前缀或后缀元素放在一个带有 <code>.input-group</code> 的 <code>&lt;div&gt;</code>中</li><li>接着，在相同的 <code>&lt;div&gt;</code> 内，在 <code>class</code> 为 <code>.input-group-addon</code> 的 <code>&lt;span&gt;</code> 内放置额外的内容</li><li>把该 <code>&lt;span&gt;</code> 放置在 <code>&lt;input&gt;</code> 元素的前面或者后面</li></ul><h2 id="导航元素"><a href="#导航元素" class="headerlink" title="导航元素"></a>导航元素</h2><ul><li><code>nav nav-tabs</code> :标签式的导航菜单 </li><li><code>nav nav-pills</code>: 胶囊式的导航菜单 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网格选项&quot;&gt;&lt;a href=&quot;#网格选项&quot; class=&quot;headerlink&quot; title=&quot;网格选项&quot;&gt;&lt;/a&gt;网格选项&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;row&lt;/code&gt;&lt;/strong&gt; :行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;col-
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="bootstrap" scheme="http://blog.poetries.top/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>使用Fiddler做抓包分析</title>
    <link href="http://blog.poetries.top/2017/11/04/fiddler/"/>
    <id>http://blog.poetries.top/2017/11/04/fiddler/</id>
    <published>2017-11-04T06:09:43.000Z</published>
    <updated>2017-11-10T07:51:40.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Fiddler简介"><a href="#一、Fiddler简介" class="headerlink" title="一、Fiddler简介"></a>一、Fiddler简介</h2><blockquote><p><code>Fiddler</code>是位于客户端和服务器端的<code>HTTP</code>代理，也是目前最常用的<code>http</code>抓包工具之一 。 它能够记录客户端和服务器之间的所有 <code>HTTP</code>请求，可以针对特定的<code>HTTP</code>请求，分析请求数据、设置断点、调试<code>web</code>应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是<code>web</code>调试的利器</p></blockquote><ul><li>客户端的所有请求都要先经过<code>Fiddler</code>，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过<code>Fiddler</code>然后发送到客户端</li><li>使用了<code>Fiddler</code>之后，web客户端和服务器的请求如下所示</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a3626e30ed1a3352?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-1efcd89c578faeda?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>主界面中主要包括四个常用的块</strong></p><ul><li><code>Fiddler</code>的菜单栏，上图绿色部分。包括捕获<code>http</code>请求，停止捕获请求，保存<code>http</code>请求，载入本地<code>session</code>、设置捕获规则等功能。</li><li><code>Fiddler</code>的工具栏,上图红色部分。包括<code>Fiddler</code>针对当前<code>view</code>的操作（暂停，清除<code>session</code>,<code>decode</code>模式、清除缓存等）。</li><li><code>web Session</code>面板，上图黄色区域，主要是<code>Fiddler</code>抓取到的每条<code>http</code>请求（每一条称为一个<code>session</code>）,主要包含了请求的<code>url</code>，协议，状态码，<code>body</code>等信息，详细的字段含义如下图所示</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-742c4cf318b6ef40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="二、HTTP请求图标说明"><a href="#二、HTTP请求图标说明" class="headerlink" title="二、HTTP请求图标说明"></a>二、HTTP请求图标说明</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d5cc377e14bcd3a4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-60a3d9069289be30?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三、Statistic"><a href="#三、Statistic" class="headerlink" title="三、Statistic"></a>三、Statistic</h2><blockquote><p>关于HTTP请求的性能和其他数据分析</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-634e34d101a4a3da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>我们可以从中看出一些基本性能数据：如DNS解析的时间消耗是<code>8ms</code>,建立<code>TCP/IP</code>连接的时间消耗是<code>8ms</code>等等信息</p></blockquote><h2 id="四、Inspectors"><a href="#四、Inspectors" class="headerlink" title="四、Inspectors"></a>四、Inspectors</h2><blockquote><p>分为上下两个部分，上半部分是请求头部分，下半部分是响应头部分。对于每一部分，提供了多种不同格式查看每个请求和响应的内容。</p></blockquote><ul><li>JPG 格式使用 ImageView 就可以看到图片</li><li>HTML/JS/CSS 使用 TextView可以看到响应的内容。</li><li>Raw标签可以查看原始的符合HTTP标准的请求和响应头。</li><li>Auth则可以查看授权Proxy-Authorization 和 Authorization的相关信息。</li><li>Cookies标签可以看到请求的cookie和响应的set-cookie头信息</li></ul><h2 id="五、Composer"><a href="#五、Composer" class="headerlink" title="五、Composer"></a>五、Composer</h2><blockquote><p>老版本的<code>fiddler</code>中叫<code>request-builder</code>.顾名思义，可以构建相应的请求，有两种常用的方式构建请求</p></blockquote><ul><li><code>Parsed 输入请求的url之后</code>executed<code>即可，也可以修改相应的头信息（如添加常用的</code>accept<code>,</code>host<code>,</code>referrer<code>,</code>cookie<code>，</code>cache-control<code>等头部）后</code>execute`.</li><li><code>Raw</code>。使用HTTP头部信息构建<code>http</code>请求。与上类似</li></ul><h2 id="六、fiddler过滤会话"><a href="#六、fiddler过滤会话" class="headerlink" title="六、fiddler过滤会话"></a>六、fiddler过滤会话</h2><blockquote><p>问题：每次使用<code>Fiddler</code>,<br>打开一个网站，都能在<code>Fiddler</code>中看到几十个会话，看得眼花缭乱。</p></blockquote><ul><li>期望：只想抓取自己想要的请求</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-323fc05889d1cd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="七、Response乱码时的处理方法"><a href="#七、Response乱码时的处理方法" class="headerlink" title="七、Response乱码时的处理方法"></a>七、Response乱码时的处理方法</h2><blockquote><p>问题：有时候我们看到<code>Response</code>中的<code>HTML</code>是乱码的， 这是因为<code>HTML</code>被压缩了， 我们可以通过两种方法去解压缩</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d93275c7db4cc8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>方法二：选中工具栏中的”Decode”。  这样会自动解压缩</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-197294a2aeeef8cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="八、反向代理-AutoResponder"><a href="#八、反向代理-AutoResponder" class="headerlink" title="八、反向代理-AutoResponder"></a>八、反向代理-AutoResponder</h2><blockquote><p>原理：利用<code>fiddler</code>作為反向代理。意思就是将外界的<code>request</code>请求端口修改掉！ 改写返回数据，最实用的功能</p></blockquote><ul><li>用浏览器随意输入一个网址，如<code>http://www.baidu.com/</code></li><li>选中序号<code>16</code>记录，右击-勾选<code>“Unlock fo Editing”</code>,选择<code>Fiddler</code>右侧<code>reponse</code>块下的<code>TextView</code>，这里修改<code>title</code>,如图：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b59b0685ce8fb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>选择<code>Fiddler</code>右侧<code>reponse</code>块下的<code>TextView</code>，这里修改<code>title</code>,如图：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dd602c351d962a8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>去掉<code>“Unlock for Editing”</code>，再选择右侧上方的<code>AutoResponder</code>,勾选下方的<code>checkbox</code>选框，并将序号<code>16</code>托到下方，同时，里面会多条记录，如下图：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5c71df63b8ee6db7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>回到浏览器，刷新页面，如图，标题变为上面改的内容</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d154a2cbeb2a63f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="九、fiddler提供了一个功能，让我们模拟低速网路环境"><a href="#九、fiddler提供了一个功能，让我们模拟低速网路环境" class="headerlink" title="九、fiddler提供了一个功能，让我们模拟低速网路环境"></a>九、fiddler提供了一个功能，让我们模拟低速网路环境</h2><blockquote><p>启用方法如：Rules → Performances → Simulate Modem Speeds</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d154a2cbeb2a63f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="十、直接在fiddler上配置host"><a href="#十、直接在fiddler上配置host" class="headerlink" title="十、直接在fiddler上配置host"></a>十、直接在fiddler上配置host</h2><blockquote><p>点击<code>tools&gt;&gt;hosts</code>,在里面填写自己想要设置的<code>host</code>即可</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5bd1f6d694bb03ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="十一、Fiddler显示请求服务器的ip及系统环境的配置方法"><a href="#十一、Fiddler显示请求服务器的ip及系统环境的配置方法" class="headerlink" title="十一、Fiddler显示请求服务器的ip及系统环境的配置方法"></a>十一、Fiddler显示请求服务器的ip及系统环境的配置方法</h2><ul><li>打开<code>Rules——&gt;Customize  Rules</code></li><li>找到如下这段代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> today: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">FiddlerObject.StatusText = <span class="string">" CustomRules.js was loaded at: "</span> + today;</span><br><span class="line"><span class="comment">// Uncomment to add a "Server" column containing the response "Server" header, if present</span></span><br><span class="line"></span><br><span class="line">在这一行后面添加如下代码：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示服务器web环境</span></span><br><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"Server"</span>, <span class="number">50</span>, <span class="string">"@response.server"</span>);</span><br><span class="line"><span class="comment">// 显示服务器IP地址</span></span><br><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"HostIP"</span>, <span class="number">50</span>, <span class="string">"x-hostIP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置后重启<code>fiddler</code>，效果如下</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d14e6280553bda0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d14e6280553bda0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="十二、fiddler断点调试"><a href="#十二、fiddler断点调试" class="headerlink" title="十二、fiddler断点调试"></a>十二、fiddler断点调试</h2><blockquote><p>第一种方法：菜单栏 <code>Rules</code> –》 <code>Automatic Breakpoints</code> –》 <code>Before Requests</code>(请求被发送到服务器端之前)；或者 <code>After Responses</code>(响应返回客户端之前)，这种设置对客户机发出的所有请求都进行拦截</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-f4e00f335a41e115.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-de8617c36d47d914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="十三、配合SwitchySharp插件使用"><a href="#十三、配合SwitchySharp插件使用" class="headerlink" title="十三、配合SwitchySharp插件使用"></a>十三、配合SwitchySharp插件使用</h2><blockquote><p>为<code>fiddler</code>创建一个规则，代理到本地的<code>8888</code>端口（<code>fiddler</code>所用的端口）<br><code>google</code>设置代理的方法：下载<code>SwitchySharp</code>插件，设置如下：</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a5861df2f7177513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>接着点击保存即可~ 这样在需要的时候可以切换到<code>Fiddler</code></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-830e8d71a794a16c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Fiddler简介&quot;&gt;&lt;a href=&quot;#一、Fiddler简介&quot; class=&quot;headerlink&quot; title=&quot;一、Fiddler简介&quot;&gt;&lt;/a&gt;一、Fiddler简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Fiddler&lt;/code&gt;是
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="调试" scheme="http://blog.poetries.top/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Fiddler" scheme="http://blog.poetries.top/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之思维导图</title>
    <link href="http://blog.poetries.top/2017/10/28/jq-naotu/"/>
    <id>http://blog.poetries.top/2017/10/28/jq-naotu/</id>
    <published>2017-10-28T00:20:43.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq1.png" alt="一、认识JQ"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq2.png" alt="二、JQ选择器"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq3.png" alt="三、JQ中对 属性 、样式、HTML内容、文本内容、值的操作"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq4.png" alt="四、JQ中的事件"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq5.png" alt="五、JQ中的筛选方法">)</p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq6.png" alt="六、JQ中 DOM操作"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq7.png" alt="七、JQ中的动画"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq8.png" alt="八、JQ对象访问"></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/jq9.png" alt="九、位置、尺寸"></p><ul><li><a href="https://pan.baidu.com/s/1qYFcg4s" target="_blank" rel="external">xmind地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/jq1.png&quot; alt=&quot;一、认识JQ&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/jq2.png&quot; al
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="jQuery" scheme="http://blog.poetries.top/tags/jQuery/"/>
    
      <category term="javascript" scheme="http://blog.poetries.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript启示录阅读笔录</title>
    <link href="http://blog.poetries.top/2017/10/24/js-read-note/"/>
    <id>http://blog.poetries.top/2017/10/24/js-read-note/</id>
    <published>2017-10-24T02:30:13.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-JavaScript对象"><a href="#第一章-JavaScript对象" class="headerlink" title="第一章 JavaScript对象"></a>第一章 JavaScript对象</h2><h3 id="1-1-创建对象"><a href="#1-1-创建对象" class="headerlink" title="1.1 创建对象"></a>1.1 创建对象</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建copy对象</span></span><br><span class="line"><span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为对象的各种属性赋值</span></span><br><span class="line">copy.living = <span class="literal">true</span>;</span><br><span class="line">copy.age = <span class="number">33</span>;</span><br><span class="line">copy.gender = <span class="string">'male'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// logs Object &#123;living = true, age = 33, gender = 'male'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(cody);</span><br></pre></td></tr></table></figure><ul><li>最重要的是要记住：对象只是属性的容器，每个属性都有一个名称和一个值</li></ul><h3 id="1-2-JavaScript构造函数构建并返回对象实例"><a href="#1-2-JavaScript构造函数构建并返回对象实例" class="headerlink" title="1.2 JavaScript构造函数构建并返回对象实例"></a>1.2 JavaScript构造函数构建并返回对象实例</h3><hr><ul><li>构造函数的作用是创建多个共享特定特性和行为的对象。</li><li>构造函数主要是用于生成对象的模具，这些对象具有默认属性和属性方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pserson是一个构造函数 使用new关键字进行实例化</span></span><br><span class="line">  <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">living,age,gender</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this表示即将创建的新对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.living = living;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.getGender = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.gender;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//实例化Person对象 </span></span><br><span class="line">    <span class="keyword">var</span> copy = <span class="keyword">new</span> Person(<span class="literal">true</span>,<span class="number">22</span>,<span class="string">'male'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(copy.constructor);<span class="comment">//输入Person函数</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-JavaScript原生内置对象构造函数"><a href="#1-3-JavaScript原生内置对象构造函数" class="headerlink" title="1.3 JavaScript原生内置对象构造函数"></a>1.3 JavaScript原生内置对象构造函数</h3><hr><ul><li><p><code>JavaScript</code>包含九个原生对象构造函数，<code>JavaScript</code>使用这些对象来构建<code>JavaScript</code>语言</p></li><li><p><code>Number()</code></p></li><li><code>String()</code></li><li><code>Boolean()</code></li><li><code>Object()</code></li><li><code>Array()</code></li><li><code>Function()</code></li><li><code>Date()</code></li><li><code>RegExp()</code></li><li><p><code>Error()</code></p></li><li><p>使用<code>new</code>关键字实例化每个原生构造函数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">22</span>);</span><br><span class="line"><span class="keyword">var</span> string = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"foo"</span>,<span class="string">"dfa"</span>);</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"return x*y"</span>);</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\bt[a-z]+\b'</span>);</span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Crap"</span>);</span><br></pre></td></tr></table></figure><h2 id="第二章-对象与属性"><a href="#第二章-对象与属性" class="headerlink" title="第二章 对象与属性"></a>第二章 对象与属性</h2><hr><h3 id="2-1-封装复杂对象"><a href="#2-1-封装复杂对象" class="headerlink" title="2.1 封装复杂对象"></a>2.1 封装复杂对象</h3><hr><ul><li><code>Object()</code>、<code>Array()</code>、 <code>Function()</code>对象可以包含其他复杂对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用对象封装，创建对象链</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    obj1_1: &#123;</span><br><span class="line">        obj1_1_1: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">     obj1_2: &#123;</span><br><span class="line">        obj1_2_1: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组封装 创建多维数组链</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArr = [ [ [] ] ];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用function封装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    va myfunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myfunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-用点表示法或中括号表示法获取-设置-更新对象属性"><a href="#2-2-用点表示法或中括号表示法获取-设置-更新对象属性" class="headerlink" title="2.2 用点表示法或中括号表示法获取/设置/更新对象属性"></a>2.2 用点表示法或中括号表示法获取/设置/更新对象属性</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creating cody Object() object</span></span><br><span class="line"><span class="keyword">var</span> cody = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// setting properties</span></span><br><span class="line">cody[<span class="string">'living'</span>] = <span class="literal">true</span>;</span><br><span class="line">cody[<span class="string">'age'</span>] = <span class="number">33</span>; </span><br><span class="line">cody[<span class="string">'gender'</span>] = <span class="string">'male'</span>;</span><br><span class="line">cody[<span class="string">'getGender'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> cody.gender;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getting properties</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    cody[<span class="string">'living'</span>], </span><br><span class="line">    cody[<span class="string">'age'</span>], </span><br><span class="line">    cody[<span class="string">'gender'</span>], </span><br><span class="line">    cody[<span class="string">'getGender'</span>]() <span class="comment">// just slap the function invocation on the end!</span></span><br><span class="line">); <span class="comment">// logs 'true 33 male male'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// updating properties, very similar to setting</span></span><br><span class="line">cody[<span class="string">'living'</span>] = <span class="literal">false</span>;</span><br><span class="line">cody[<span class="string">'age'</span>] = <span class="number">99</span>; </span><br><span class="line">cody[<span class="string">'gender'</span>] = <span class="string">'female'</span>;</span><br><span class="line">cody[<span class="string">'getGender'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">'Gender = '</span> + cody.gender;&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-删除对象属性"><a href="#2-3-删除对象属性" class="headerlink" title="2.3 删除对象属性"></a>2.3 删除对象属性</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">bar</span>:<span class="string">"bar"</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> foo.bar;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bar"</span> <span class="keyword">in</span> foo);</span><br></pre></td></tr></table></figure><h3 id="2-4-使用hasOwnProperty验证对象属性是否来自原型链"><a href="#2-4-使用hasOwnProperty验证对象属性是否来自原型链" class="headerlink" title="2.4 使用hasOwnProperty验证对象属性是否来自原型链"></a>2.4 使用hasOwnProperty验证对象属性是否来自原型链</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">foo</span>:<span class="string">"value"</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">"foo"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="2-5-使用in操作符来检查一个对象是否包含给定属性"><a href="#2-5-使用in操作符来检查一个对象是否包含给定属性" class="headerlink" title="2.5 使用in操作符来检查一个对象是否包含给定属性"></a>2.5 使用in操作符来检查一个对象是否包含给定属性</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;<span class="attr">foo</span>: <span class="string">'value'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo'</span> <span class="keyword">in</span> myObject); <span class="comment">// logs true</span></span><br></pre></td></tr></table></figure><h3 id="2-6-使用for-in循环枚举对象属性"><a href="#2-6-使用for-in循环枚举对象属性" class="headerlink" title="2.6 使用for in循环枚举对象属性"></a>2.6 使用for in循环枚举对象属性</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copy = &#123;</span><br><span class="line">    age:<span class="number">23</span>,</span><br><span class="line">    gender:<span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> copy)&#123;<span class="comment">//key表示每个属性的名称</span></span><br><span class="line">    <span class="keyword">if</span>(copy.hasOwnproperty(key))&#123; <span class="comment">//避免来自原型链的属性</span></span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三章-Object"><a href="#第三章-Object" class="headerlink" title="第三章 Object"></a>第三章 Object</h2><h3 id="3-1-Object对象概要"><a href="#3-1-Object对象概要" class="headerlink" title="3.1 Object对象概要"></a>3.1 Object对象概要</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copy = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> copy)&#123;</span><br><span class="line">    <span class="keyword">if</span>(copy.hasOwnproperty(key))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Object对象实例属性和方法"><a href="#3-2-Object对象实例属性和方法" class="headerlink" title="3.2 Object对象实例属性和方法"></a>3.2 Object对象实例属性和方法</h3><hr><ul><li>实例属性 <ul><li><code>constructor</code></li></ul></li><li>实例方法<ul><li><code>hasOwnProperty()</code></li><li><code>isPrototypeOf()</code></li><li><code>propertyIsEnumerable()</code></li><li><code>toLocaleString()</code></li><li><code>toString()</code></li><li><code>valueOf()</code></li></ul></li></ul><h2 id="第四章-Function"><a href="#第四章-Function" class="headerlink" title="第四章 Function"></a>第四章 Function</h2><h3 id="4-1-Function对象属性和方法"><a href="#4-1-Function对象属性和方法" class="headerlink" title="4.1 Function对象属性和方法"></a>4.1 Function对象属性和方法</h3><hr><ul><li>属性 <code>prototype</code></li></ul><h3 id="4-2-function对象实例属性和方法"><a href="#4-2-function对象实例属性和方法" class="headerlink" title="4.2 function对象实例属性和方法"></a>4.2 function对象实例属性和方法</h3><hr><ul><li><p>实例属性</p><ul><li><code>arguments</code></li><li><code>constructor</code></li><li><code>length</code></li></ul></li><li><p>实例方法</p><ul><li><code>apply()</code></li><li><code>call()</code></li><li><code>toString()</code></li></ul></li></ul><h3 id="4-3-this和arguments适用于所有函数"><a href="#4-3-this和arguments适用于所有函数" class="headerlink" title="4.3 this和arguments适用于所有函数"></a>4.3 <code>this</code>和<code>arguments</code>适用于所有函数</h3><hr><ul><li><p>在所有函数的作用域、函数体内，<code>this</code>和<code>arguments</code>值都是可用的</p></li><li><p><code>arguments</code>对象是一种类数组对象，它包含所有传递给函数的参数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">4</span>,<span class="number">4</span>));<span class="comment">//8</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject1 = &#123;</span><br><span class="line">    name: <span class="string">'myObject1'</span>,</span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject1.myMethod(); <span class="comment">// logs 'myObject1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>);&#125;; </span><br><span class="line"></span><br><span class="line">myObject2(); <span class="comment">// logs Window</span></span><br></pre></td></tr></table></figure><h3 id="4-4-函数实例的length属性和arguments-length"><a href="#4-4-函数实例的length属性和arguments-length" class="headerlink" title="4.4 函数实例的length属性和arguments.length"></a>4.4 函数实例的length属性和arguments.length</h3><hr><ul><li><code>argument</code>对象有一个独特的<code>length</code>属性，它给出的是在调用时发送给函数的参数数量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject1 = &#123;</span><br><span class="line">    name: <span class="string">'myObject1'</span>,</span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject1.myMethod(); <span class="comment">// logs 'myObject1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>);&#125;; </span><br><span class="line"></span><br><span class="line">myObject2(); <span class="comment">// logs Window</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>Function()</code>实例的<code>length</code>属性，实际上可以获得函数所需要的参数总数量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params">z, s, d, e, r, m, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myFunction.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunction()); <span class="comment">//logs 7</span></span><br></pre></td></tr></table></figure><h3 id="4-5-定义函数语句、表达式、构造函数"><a href="#4-5-定义函数语句、表达式、构造函数" class="headerlink" title="4.5 定义函数语句、表达式、构造函数"></a>4.5 定义函数语句、表达式、构造函数</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数构造函数</span></span><br><span class="line"><span class="keyword">var</span> addConstructor = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"return x + y"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数语句</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">addStatement</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> addExp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-调用函数（函数、方法、构造函数、call、apply）"><a href="#4-6-调用函数（函数、方法、构造函数、call、apply）" class="headerlink" title="4.6 调用函数（函数、方法、构造函数、call、apply）"></a>4.6 调用函数（函数、方法、构造函数、call、apply）</h3><hr><ul><li>使用四种不同场景或模式调用函数<ul><li>作为函数</li><li>作为方法</li><li>作为构造函数</li><li>使用<code>call</code>、<code>apply</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function pattern</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">'foo'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myFunction()); <span class="comment">// log 'foo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// method pattern</span></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;<span class="attr">myFunction</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">'bar'</span>;&#125;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myObject.myFunction()); <span class="comment">// log 'bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor pattern</span></span><br><span class="line"><span class="keyword">var</span> Cody = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.living = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">this</span>.gender = <span class="string">'male'</span>;</span><br><span class="line">    <span class="keyword">this</span>.getGender = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.gender;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cody = <span class="keyword">new</span> Cody(); <span class="comment">// invoke via Cody constructor</span></span><br><span class="line"><span class="built_in">console</span>.log(cody); <span class="comment">// logs cody object and properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply() and call() pattern</span></span><br><span class="line"><span class="keyword">var</span> greet = &#123;</span><br><span class="line">    runGreet: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="built_in">arguments</span>[<span class="number">0</span>],<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cody = &#123;<span class="attr">name</span>:<span class="string">'cody'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> lisa = &#123;<span class="attr">name</span>:<span class="string">'lisa'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//invoke the runGreet function as if it were inside of the cody object</span></span><br><span class="line">greet.runGreet.call(cody,<span class="string">'foo'</span>,<span class="string">'bar'</span>); <span class="comment">//logs cody</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//invoke the runGreet function as if it were inside of the lisa object</span></span><br><span class="line">greet.runGreet.apply(lisa, [<span class="string">'foo'</span>,<span class="string">'bar'</span>]); <span class="comment">//logs lisa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Notice the difference between call() and apply() in how parameters are sent to the function being invoked */</span></span><br></pre></td></tr></table></figure><h2 id="第六章-this关键字"><a href="#第六章-this关键字" class="headerlink" title="第六章 this关键字"></a>第六章 this关键字</h2><hr><h3 id="6-1-this概要及this如何引用"><a href="#6-1-this概要及this如何引用" class="headerlink" title="6.1 this概要及this如何引用"></a>6.1 this概要及this如何引用</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cody = &#123;</span><br><span class="line">    living : <span class="literal">true</span>,</span><br><span class="line">    age : <span class="number">23</span>,</span><br><span class="line">    gender : <span class="string">'male'</span>,</span><br><span class="line">    getGender : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> cody.gender;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cody.getGender()); <span class="comment">// logs 'male'</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>this</code>来重写<code>copy</code>对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cody = &#123;</span><br><span class="line">    living: <span class="literal">true</span>, </span><br><span class="line">    age: <span class="number">23</span>, </span><br><span class="line">    gender: <span class="string">'male'</span>, </span><br><span class="line">    getGender: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.gender;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cody.getGender()); <span class="comment">// logs 'male'</span></span><br></pre></td></tr></table></figure><ul><li><code>this</code>，只要记住，总的来说，<code>this</code>是在函数内部使用，用来引用包含函数的对象，而不是函数本身【使用<code>call</code>、<code>apply</code>、<code>new</code>情况例外】</li></ul><h3 id="6-2-如何确定this值"><a href="#6-2-如何确定this值" class="headerlink" title="6.2 如何确定this值"></a>6.2 如何确定this值</h3><hr><ul><li><code>this</code>值会被传递给所有函数，其值基于在运行时调用函数的上下文</li></ul><h3 id="6-3-在嵌套函数中用this关键字引用head对象"><a href="#6-3-在嵌套函数中用this关键字引用head对象" class="headerlink" title="6.3 在嵌套函数中用this关键字引用head对象"></a>6.3 在嵌套函数中用this关键字引用head对象</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    func1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// logs myObject</span></span><br><span class="line">        <span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// logs window, and will do so from this point on</span></span><br><span class="line">            <span class="keyword">var</span> func3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// logs window, as it’s the head object</span></span><br><span class="line">            &#125;();</span><br><span class="line">        &#125;();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.func1();</span><br></pre></td></tr></table></figure><ul><li>总结：当<code>this</code>值的宿主函数被封装在另一个函数的内部或在另一个函数的上下文中被调用时，<code>this</code>值永远是对<code>window</code>对象的引用</li></ul><h3 id="6-4-充分利用作用域链研究嵌套函数问题"><a href="#6-4-充分利用作用域链研究嵌套函数问题" class="headerlink" title="6.4 充分利用作用域链研究嵌套函数问题"></a>6.4 充分利用作用域链研究嵌套函数问题</h3><hr><ul><li>可以简单在父函数中使用作用域链来保留对<code>this</code>的引用，以便<code>this</code>值不丢失</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    myProperty: <span class="string">'I can see the light'</span>, </span><br><span class="line">    myMethod : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// myMethod 作用域内，保存this引用（也就是myObject）</span></span><br><span class="line">        <span class="keyword">var</span> helperFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 字函数</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.log(that.myProperty); <span class="comment">// logs 'I can see the light'</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// logs window object, if we don't use "that"</span></span><br><span class="line">        &#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.myMethod(); <span class="comment">// 调用 myMethod</span></span><br></pre></td></tr></table></figure><h3 id="6-5-使用call-、apply-控制this值"><a href="#6-5-使用call-、apply-控制this值" class="headerlink" title="6.5 使用call()、apply()控制this值"></a>6.5 使用call()、apply()控制this值</h3><hr><ul><li><code>this</code>值通常取决于调用函数的上下文，但我们可以使用<code>apply</code>、<code>call</code>重写<code>this</code>值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用函数的时候，通过call，将this指向myObject</span></span><br><span class="line">    <span class="keyword">this</span>.foo = param1;</span><br><span class="line">    <span class="keyword">this</span>.bar = param2;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// logs Object &#123;foo = 'foo', bar = 'bar'&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myFunction.call(myObject, <span class="string">'foo'</span>, <span class="string">'bar'</span>); <span class="comment">// invoke function, set this value to myObject</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject) <span class="comment">// logs Object &#123;foo = 'foo', bar = 'bar'&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用函数的时候，通过apply()，将this指向myObject</span></span><br><span class="line">    <span class="keyword">this</span>.foo = param1;</span><br><span class="line">    <span class="keyword">this</span>.bar = param2;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// logs Object &#123;foo = 'foo', bar = 'bar'&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myFunction.apply(myObject, [<span class="string">'foo'</span>, <span class="string">'bar'</span>]); <span class="comment">// invoke function, set this value</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject) <span class="comment">// logs Object &#123;foo = 'foo', bar = 'bar'&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章-JavaScript对象&quot;&gt;&lt;a href=&quot;#第一章-JavaScript对象&quot; class=&quot;headerlink&quot; title=&quot;第一章 JavaScript对象&quot;&gt;&lt;/a&gt;第一章 JavaScript对象&lt;/h2&gt;&lt;h3 id=&quot;1-1-创建对象&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="读书笔记" scheme="http://blog.poetries.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>编写可维护的JavaScript</title>
    <link href="http://blog.poetries.top/2017/10/24/js-good-style/"/>
    <id>http://blog.poetries.top/2017/10/24/js-good-style/</id>
    <published>2017-10-24T02:10:43.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、事件处理"><a href="#一、事件处理" class="headerlink" title="一、事件处理"></a>一、事件处理</h2><hr><h3 id="1-1-规则1：隔离应用层"><a href="#1-1-规则1：隔离应用层" class="headerlink" title="1.1 规则1：隔离应用层"></a>1.1 规则1：隔离应用层</h3><ul><li>好的写法，拆分应用逻辑</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = &#123;</span><br><span class="line">    handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.showPopup(e);  </span><br><span class="line">    &#125;,</span><br><span class="line">    showPopup: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"popup"</span>);</span><br><span class="line">        popup.style.left = e.clientX + <span class="string">"px"</span>;</span><br><span class="line">        popup.style.top = e.clientY + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addEventListener(element,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    MyApp.handleClick(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-2-规则2：不要分发事件对象"><a href="#1-2-规则2：不要分发事件对象" class="headerlink" title="1.2 规则2：不要分发事件对象"></a>1.2 规则2：不要分发事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = &#123;</span><br><span class="line">    handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 假设事件支持 DOMlevel2</span></span><br><span class="line">     </span><br><span class="line">     e.preventDefault();</span><br><span class="line">     e.stopPropagation();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//传入应用逻辑</span></span><br><span class="line">      <span class="keyword">this</span>.showPopup(e.clientX,e.clientY);  </span><br><span class="line">    &#125;,</span><br><span class="line">    showPopup: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"popup"</span>);</span><br><span class="line">        popup.style.left = x + <span class="string">"px"</span>;</span><br><span class="line">        popup.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addEventListener(element,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    MyApp.handleClick(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、javascript中的检测方法"><a href="#二、javascript中的检测方法" class="headerlink" title="二、javascript中的检测方法"></a>二、javascript中的检测方法</h2><hr><h3 id="2-1-检测原始值"><a href="#2-1-检测原始值" class="headerlink" title="2.1 检测原始值"></a>2.1 检测原始值</h3><hr><blockquote><p>在<code>JavaScript</code>中有五种原始类型：字符串、数字、布尔值、<code>null</code>、<code>undefined</code>。如果你希望一个值是字符串、数字、布尔值或<code>undefined</code>，最佳选择是使用typeof运算符。typeof运算符会返回一个表示值 饿类型的字符串</p></blockquote><ul><li>对于字符串，<code>typeof</code>返回<code>string</code></li><li>对于数字，<code>typeof</code>返回<code>number</code></li><li>对于布尔值，<code>typeof</code>返回<code>boolean</code></li><li>对于<code>undefined</code>，typeof返回<code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测字符串</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> name === <span class="string">"string"</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测数字</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> count === <span class="string">"number"</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测布尔值</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> found === <span class="string">"boolean"</span> &amp;&amp; found)&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//检测undefined</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> myApp === <span class="string">"undefined"</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测null</span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line"><span class="keyword">if</span> ( ele !== <span class="literal">null</span>)&#123;</span><br><span class="line">    ele.className = <span class="string">"found"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-检测引用值"><a href="#2-2-检测引用值" class="headerlink" title="2.2 检测引用值"></a>2.2 检测引用值</h3><hr><blockquote><p>有几种内置的引用类型 <code>Object</code>、<code>Array</code>、<code>Date</code>、<code>Error</code>。<code>typeof</code>运算符在判断这些引用类型时显得力不从心，因为所有对象都会返回<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>()); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><ul><li>检测某个引用类型的最好方法使用<code>instanceof</code>运算符。  </li><li>语法 <code>value instanceof constructor</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测日期</span></span><br><span class="line"><span class="keyword">if</span>( value <span class="keyword">instanceof</span> <span class="built_in">Date</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.getFullYear());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测正则表达式</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.test(antherValue)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"poetries"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-检测函数"><a href="#2-3-检测函数" class="headerlink" title="2.3 检测函数"></a>2.3 检测函数</h3><hr><p>typeof运算符可以检测函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> myFunc === <span class="string">"function"</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-检测数组"><a href="#2-4-检测数组" class="headerlink" title="2.4 检测数组"></a>2.4 检测数组</h3><hr><ul><li>优雅的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-检测属性"><a href="#2-5-检测属性" class="headerlink" title="2.5 检测属性"></a>2.5 检测属性</h3><hr><ul><li>判断属性是否存在的最好方法是使用<code>in</code>运算符，<code>in</code>运算符仅仅是判断属性是否存在，而不会去读属性的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    related: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"count"</span> <span class="keyword">in</span> object)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果只是想检查实例对象的某个属性是否存在，则使用<code>hasOwnProperty()</code>方法。所有继承<code>Object</code>的对象都有这个方法，如果实例存在则返回<code>true</code>。</li><li>需要注意的是在<code>IE8</code>以及更早的版本中，<code>DOM</code>对象并非继承<code>Object</code>，因此也不包含这个方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于所有非DOM对象来说，这是好的做法</span></span><br><span class="line"><span class="keyword">if</span>(object.hasOwnProperty(<span class="string">"related"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你不确定是否为DOM对象 则需要这样写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"hasOwnProperty"</span> <span class="keyword">in</span> object &amp;&amp; object.hasOwnProperty(<span class="string">"related"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在判断实例是否存在时，更倾向使用in运算符，只有在需要判断实例属性时才用hasOwnProperty</p><h2 id="三、将配置数据从代码中分离"><a href="#三、将配置数据从代码中分离" class="headerlink" title="三、将配置数据从代码中分离"></a>三、将配置数据从代码中分离</h2><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将配置数据抽离出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    MSG_INVALID_VALUE: <span class="string">"invalid value"</span>,</span><br><span class="line">    URL_INVALID: <span class="string">"errors/invalid.php"</span>,</span><br><span class="line">    CSS_SELECTED: <span class="string">"selected"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value)&#123;</span><br><span class="line">        alert(config.MSG_INVALID_VALUE);</span><br><span class="line">        location.href = config.URL_INVALID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考<ul><li>编写可维护的JavaScript</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、事件处理&quot;&gt;&lt;a href=&quot;#一、事件处理&quot; class=&quot;headerlink&quot; title=&quot;一、事件处理&quot;&gt;&lt;/a&gt;一、事件处理&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-规则1：隔离应用层&quot;&gt;&lt;a href=&quot;#1-1-规则1：隔离应用层&quot; clas
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="读书笔记" scheme="http://blog.poetries.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离之数据Mock</title>
    <link href="http://blog.poetries.top/2017/10/23/js-mock/"/>
    <id>http://blog.poetries.top/2017/10/23/js-mock/</id>
    <published>2017-10-23T11:50:24.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章内容整理于互联网，方便学习</p></blockquote><h2 id="一、学前预热"><a href="#一、学前预热" class="headerlink" title="一、学前预热"></a>一、学前预热</h2><blockquote><p>为了做到前后端并行开发，数据<code>mock</code>就成为环境搭建的重要一环</p></blockquote><h3 id="1-1-Web应用前后端分离"><a href="#1-1-Web应用前后端分离" class="headerlink" title="1.1 Web应用前后端分离"></a>1.1 Web应用前后端分离</h3><ul><li>后台向前台提供<code>API</code>接口,只负责数据的提供和计算，而完全不处理展现 </li><li>前台通过<code>Http(Ajax)</code>请求获取数据,　在浏览器端动态构建界面显示数据</li></ul><h3 id="1-2-利用Node-express提供模拟数据"><a href="#1-2-利用Node-express提供模拟数据" class="headerlink" title="1.2 利用Node+express提供模拟数据"></a>1.2 利用Node+express提供模拟数据</h3><ul><li>优点：可以在浏览器端访问 </li><li>缺点：如果是打包发布就无法访问模拟数据, 只能是测试时使用</li></ul><blockquote><p>修改build/dev-server.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载json数据</span></span><br><span class="line"><span class="keyword">var</span> apiData = <span class="built_in">require</span>(<span class="string">'../src/mock/data.json'</span>)</span><br><span class="line"><span class="keyword">var</span> home = apiData.home;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到路由器</span></span><br><span class="line"><span class="keyword">var</span> apiRouter = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册路由</span></span><br><span class="line">apiRouter.get(<span class="string">'/home'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: <span class="number">0</span>,   <span class="comment">//0代表正确数据</span></span><br><span class="line">      data: seller</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启用路由</span></span><br><span class="line">app.use(<span class="string">'/api'</span>, apiRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问http://localhost:8080/api/home</span></span><br></pre></td></tr></table></figure><h3 id="1-3-利用mockjs提供模拟数据"><a href="#1-3-利用mockjs提供模拟数据" class="headerlink" title="1.3 利用mockjs提供模拟数据"></a>1.3 利用mockjs提供模拟数据</h3><blockquote><p>Mockjs: 用来拦截ajax请求, 生成随机数据返回</p></blockquote><ul><li>优点：不可以在浏览器端访问 </li><li>缺点：打包发布运行模拟接口也是可以用的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>  </span><br><span class="line"><span class="keyword">import</span> apiData <span class="keyword">from</span> <span class="string">'./data.json'</span></span><br><span class="line"></span><br><span class="line">Mock.mock(<span class="string">'/api2/seller'</span>, &#123;<span class="attr">code</span>:<span class="number">0</span>, <span class="attr">data</span>:apiData.seller&#125;)</span><br><span class="line">Mock.mock(<span class="string">'/api2/goods'</span>, &#123;<span class="attr">code</span>:<span class="number">0</span>, <span class="attr">data</span>:apiData.goods&#125;)</span><br><span class="line">Mock.mock(<span class="string">'/api2/ratings'</span>, &#123;<span class="attr">code</span>:<span class="number">0</span>, <span class="attr">data</span>:apiData.ratings&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-4-使用postman工具测试接口"><a href="#1-4-使用postman工具测试接口" class="headerlink" title="1.4 使用postman工具测试接口"></a>1.4 使用postman工具测试接口</h3><ul><li><code>postman</code>是用来测试<code>API</code>接口的<code>chrome</code>插件 </li><li><code>postman</code>也是一个活接口文档</li></ul><h3 id="1-5-ajax请求mock数据接口"><a href="#1-5-ajax请求mock数据接口" class="headerlink" title="1.5 ajax请求mock数据接口"></a>1.5 ajax请求mock数据接口</h3><ul><li><code>vue-resource</code>是用于<code>ajax</code>请求的<code>vue</code>插件 </li><li><code>axios</code>是浏览器/服务器端通用的<code>ajax</code>请求库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span> </span><br><span class="line">Vue.use(VueResource)</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件对象多了$http属性, 使用它发送ajax请求</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/api2/seller'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.body)</span><br><span class="line">&#125;, (response) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'失败了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>  </span><br><span class="line">axios.get(<span class="string">'/api2/seller'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.body)</span><br><span class="line">&#125;, (response) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'失败了'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="二、数据mock思路"><a href="#二、数据mock思路" class="headerlink" title="二、数据mock思路"></a>二、数据mock思路</h2><ul><li>在<code>client</code>端处数据<code>mock</code></li><li>在<code>server</code>端<code>mock</code></li></ul><blockquote><ul><li>第一种方式拦截了请求的发出，直接返回<code>mock</code>的数据，而第二种方式请求则真实地发出，只是在<code>server</code>端进行<code>route</code>拦截</li><li>前后端分离的方式，就是在传统开发模式中加了一个<code>node</code>层，这样数据<code>mock</code>完全可以在<code>node server</code>端完成，基本思路如下</li></ul></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-db916b41fde14ca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mock"></p><h3 id="2-1-mock思路说明"><a href="#2-1-mock思路说明" class="headerlink" title="2.1 mock思路说明"></a>2.1 mock思路说明</h3><ul><li>只有线下开发模式，才会需要进行数据<code>mock</code></li><li>根据请求的<code>url</code>，拼接形成一个<code>file path</code></li><li>为了避免<code>node</code>缓存，删除<code>require.cache(path)</code></li><li>读取<code>require(path)</code> ，如果该文件不存在或读取失败，则跳转到失败路由。这样简单的数据<code>mock</code>就实现了</li></ul><h3 id="2-2-代码描述"><a href="#2-2-代码描述" class="headerlink" title="2.2 代码描述"></a>2.2 代码描述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  router.set(<span class="string">'/api/*'</span>, mockapi)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockapi</span>(<span class="params">req, res, opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> basePath = url.parse(req.url).pathname;</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> findPath = <span class="built_in">require</span>.resolve(prefixPath + basePath + <span class="string">'.js'</span>);</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">require</span>.cache[findPath]</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">require</span>(findPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result(req, res, opts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result.status === <span class="string">'undefined'</span> || <span class="keyword">typeof</span> result.body === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'status 或 body 不存在'</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(result.status, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">     </span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(result.body))</span><br><span class="line">    res.end();</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Mock-js使用详解"><a href="#三、Mock-js使用详解" class="headerlink" title="三、Mock.js使用详解"></a>三、Mock.js使用详解</h2><h3 id="3-1-Mock-js实现的功能"><a href="#3-1-Mock-js实现的功能" class="headerlink" title="3.1 Mock.js实现的功能"></a>3.1 Mock.js实现的功能</h3><ul><li>让前端攻城师独立于后端进行开发</li><li>通过随机数据，模拟各种场景</li><li>不需要修改既有代码，就可以拦截 <code>Ajax</code> 请求，返回模拟的响应数据</li><li>支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</li></ul><h3 id="3-2-Mock安装"><a href="#3-2-Mock安装" class="headerlink" title="3.2 Mock安装"></a>3.2 Mock安装</h3><h4 id="3-2-1-Node下使用"><a href="#3-2-1-Node下使用" class="headerlink" title="3.2.1 Node下使用"></a>3.2.1 Node下使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Mock</span></span><br><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="comment">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class="line">    <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">        <span class="comment">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h4 id="3-2-2-RequireJS-AMD"><a href="#3-2-2-RequireJS-AMD" class="headerlink" title="3.2.2 RequireJS (AMD)"></a>3.2.2 RequireJS (AMD)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 Mock 路径</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        mock: <span class="string">'http://mockjs.com/dist/mock'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载 Mock</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'mock'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">Mock</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用 Mock</span></span><br><span class="line">    <span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">        <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">            <span class="string">'id|+1'</span>: <span class="number">1</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML +=</span><br><span class="line">        <span class="string">'&lt;pre&gt;'</span> +</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>) +</span><br><span class="line">        <span class="string">'&lt;/pre&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3-使用语法"><a href="#3-3-使用语法" class="headerlink" title="3.3 使用语法"></a>3.3 使用语法</h3><ul><li><code>Mock.js</code> 的语法规范包括两部分<ul><li>数据模板定义规范</li><li>数据占位符定义规范</li></ul></li></ul><h4 id="3-3-1-数据模板定义规范"><a href="#3-3-1-数据模板定义规范" class="headerlink" title="3.3.1 数据模板定义规范"></a>3.3.1 数据模板定义规范</h4><ul><li>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性名   name</span></span><br><span class="line"><span class="comment">// 生成规则 rule</span></span><br><span class="line"><span class="comment">// 属性值   value</span></span><br><span class="line"><span class="string">'name|rule'</span>: value</span><br></pre></td></tr></table></figure><ul><li>属性名 和 生成规则 之间用竖线 <code>|</code> 分隔</li><li>生成规则 是可选的</li><li><p>生成规则 有 7 种格式</p><ul><li><code>&#39;name|min-max&#39;: value</code></li><li><code>&#39;name|count&#39;: value</code></li><li><code>&#39;name|min-max.dmin-dmax&#39;: value</code></li><li><code>&#39;name|min-max.dcount&#39;: value</code></li><li><code>&#39;name|count.dmin-dmax&#39;: value</code></li><li><code>&#39;name|count.dcount&#39;: value</code></li><li><code>&#39;name|+step&#39;: value</code></li></ul></li><li><p>生成规则 的 含义 需要依赖 属性值的类型 才能确定</p></li><li>属性值 中可以含有 <code>@</code>占位符</li><li>属性值 还指定了最终值的初始值和类型</li></ul><h4 id="3-3-2-生成规则和示例"><a href="#3-3-2-生成规则和示例" class="headerlink" title="3.3.2 生成规则和示例"></a>3.3.2 生成规则和示例</h4><ul><li><p>属性值是字符串 <code>String</code></p><ul><li><code>&#39;name|min-max&#39;: string</code><ul><li>通过重复 <code>string</code>生成一个字符串，重复次数大于等于<code>min</code>，小于等于 <code>max</code></li></ul></li><li><code>&#39;name|count&#39;: string</code><ul><li>通过重复 <code>string</code>生成一个字符串，重复次数等于 <code>count</code>。</li></ul></li></ul></li><li><p>属性值是数字<code>Number</code></p><ul><li><code>&#39;name|+1&#39;: number</code><ul><li>属性值自动加 <code>1</code>，初始值为 <code>number</code></li></ul></li><li><code>&#39;name|min-max&#39;: number</code><ul><li>生成一个大于等于 <code>min</code>、小于等于 <code>max</code>的整数，属性值 <code>number</code> 只是用来确定类型</li></ul></li><li><code>&#39;name|min-max.dmin-dmax&#39;: number</code><ul><li>生成一个浮点数，整数部分大于等于<code>min</code>、小于等于 <code>max</code>，小数部分保留 <code>dmin</code> 到 <code>dmax</code> 位</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'number1|1-100.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number2|123.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number3|123.3'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number4|123.10'</span>: <span class="number">1.123</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"number1"</span>: <span class="number">12.92</span>,</span><br><span class="line">    <span class="string">"number2"</span>: <span class="number">123.51</span>,</span><br><span class="line">    <span class="string">"number3"</span>: <span class="number">123.777</span>,</span><br><span class="line">    <span class="string">"number4"</span>: <span class="number">123.1231091814</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>属性值是布尔型 <code>Boolean</code></p><ul><li><code>&#39;name|1&#39;: boolean</code><ul><li>随机生成一个布尔值，值为 <code>true</code> 的概率是 <code>1/2</code>，值为 <code>false</code> 的概率同样是 <code>1/2</code></li></ul></li><li><code>&#39;name|min-max&#39;: value</code><ul><li>随机生成一个布尔值，值为 <code>value</code> 的概率是<code>min / (min + max)</code>，值为 <code>!value</code>的概率是 <code>max / (min + max)</code>\</li></ul></li></ul></li><li><p>属性值是对象 <code>Object</code></p><ul><li><code>&#39;name|count&#39;: object</code><ul><li>从属性值 <code>object</code>中随机选取 <code>count</code>个属性</li></ul></li><li><code>&#39;name|min-max&#39;: object</code><ul><li>从属性值 <code>object</code>中随机选取 <code>min</code> 到 <code>max</code> 个属性</li></ul></li></ul></li><li><p>属性值是数组 <code>Array</code></p><ul><li><code>&#39;name|1&#39;: array</code><ul><li>从属性值 <code>array</code> 中随机选取 <code>1</code>个元素，作为最终值</li></ul></li><li><code>&#39;name|+1&#39;: array</code><ul><li>从属性值 <code>array</code>中顺序选取 <code>1</code> 个元素，作为最终值</li></ul></li><li><code>&#39;name|min-max&#39;: array</code><ul><li>通过重复属性值<code>array</code> 生成一个新数组，重复次数大于等于 <code>min</code>，小于等于 <code>max</code></li></ul></li><li><code>&#39;name|count&#39;: array</code><ul><li>通过重复属性值 <code>array</code>生成一个新数组，重复次数为 <code>count</code></li></ul></li></ul></li><li><p>属性值是函数 <code>Function</code></p><ul><li><code>&#39;name&#39;: function</code><ul><li>执行函数 <code>function</code>，取其返回值作为最终的属性值，函数的上下文为属性 <code>&#39;name&#39;</code> 所在的对象</li></ul></li></ul></li><li><p>属性值是正则表达式 <code>RegExp</code></p><ul><li><code>&#39;name&#39;: regexp</code><ul><li>根据正则表达式 <code>regexp</code> 反向生成可以匹配它的字符串。用于生成自定义格式的字符串</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'regexp1'</span>: <span class="regexp">/[a-z][A-Z][0-9]/</span>,</span><br><span class="line">    <span class="string">'regexp2'</span>: <span class="regexp">/\w\W\s\S\d\D/</span>,</span><br><span class="line">    <span class="string">'regexp3'</span>: <span class="regexp">/\d&#123;5,10&#125;/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"regexp1"</span>: <span class="string">"pJ7"</span>,</span><br><span class="line">    <span class="string">"regexp2"</span>: <span class="string">"F)\fp1G"</span>,</span><br><span class="line">    <span class="string">"regexp3"</span>: <span class="string">"561659409"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-数据占位符定义规范"><a href="#3-3-3-数据占位符定义规范" class="headerlink" title="3.3.3 数据占位符定义规范"></a>3.3.3 数据占位符定义规范</h4><blockquote><p>占位符,只是在属性值字符串中占个位置，并不出现在最终的属性值中</p></blockquote><ul><li>占位符 的格式为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@占位符</span><br><span class="line">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure><ul><li>用 <code>@</code>来标识其后的字符串是 占位符</li><li>占位符 引用的是 <code>Mock.Random</code> 中的方法</li><li>通过 <code>Mock.Random.extend()</code> 来扩展自定义占位符</li><li>占位符 也可以引用 数据模板 中的属性</li><li>占位符 会优先引用 数据模板 中的属性</li><li>占位符 支持 相对路径 和 绝对路径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        first: <span class="string">'@FIRST'</span>,</span><br><span class="line">        middle: <span class="string">'@FIRST'</span>,</span><br><span class="line">        last: <span class="string">'@LAST'</span>,</span><br><span class="line">        full: <span class="string">'@first @middle @last'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: &#123;</span><br><span class="line">        <span class="string">"first"</span>: <span class="string">"Charles"</span>,</span><br><span class="line">        <span class="string">"middle"</span>: <span class="string">"Brenda"</span>,</span><br><span class="line">        <span class="string">"last"</span>: <span class="string">"Lopez"</span>,</span><br><span class="line">        <span class="string">"full"</span>: <span class="string">"Charles Brenda Lopez"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-Mock-mock"><a href="#3-4-Mock-mock" class="headerlink" title="3.4 Mock.mock()"></a>3.4 Mock.mock()</h3><h4 id="3-4-1-Mock-mock-template"><a href="#3-4-1-Mock-mock-template" class="headerlink" title="3.4.1 Mock.mock( template )"></a>3.4.1 Mock.mock( template )</h4><ul><li>根据数据模板生成模拟数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- （必选）加载 Mock --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mock.mock( template )</span></span><br><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'Syntax Demo'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'string1|1-10'</span>: <span class="string">'★'</span>,</span><br><span class="line">    <span class="string">'string2|3'</span>: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'number1|+1'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'number2|1-100'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'number3|1-100.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number4|123.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number5|123.3'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number6|123.10'</span>: <span class="number">1.123</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'boolean1|1'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'boolean2|1-2'</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'object1|2-4'</span>: &#123;</span><br><span class="line">        <span class="string">'110000'</span>: <span class="string">'北京市'</span>,</span><br><span class="line">        <span class="string">'120000'</span>: <span class="string">'天津市'</span>,</span><br><span class="line">        <span class="string">'130000'</span>: <span class="string">'河北省'</span>,</span><br><span class="line">        <span class="string">'140000'</span>: <span class="string">'山西省'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'object2|2'</span>: &#123;</span><br><span class="line">        <span class="string">'310000'</span>: <span class="string">'上海市'</span>,</span><br><span class="line">        <span class="string">'320000'</span>: <span class="string">'江苏省'</span>,</span><br><span class="line">        <span class="string">'330000'</span>: <span class="string">'浙江省'</span>,</span><br><span class="line">        <span class="string">'340000'</span>: <span class="string">'安徽省'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'array1|1'</span>: [<span class="string">'AMD'</span>, <span class="string">'CMD'</span>, <span class="string">'KMD'</span>, <span class="string">'UMD'</span>],</span><br><span class="line">    <span class="string">'array2|1-10'</span>: [<span class="string">'Mock.js'</span>],</span><br><span class="line">    <span class="string">'array3|3'</span>: [<span class="string">'Mock.js'</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'function'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(template)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">    .appendTo(<span class="string">'body'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//res</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Syntax Demo"</span>,</span><br><span class="line">    <span class="string">"string1"</span>: <span class="string">"★★★"</span>,</span><br><span class="line">    <span class="string">"string2"</span>: <span class="string">"valuevaluevalue"</span>,</span><br><span class="line">    <span class="string">"number1"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"number2"</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="string">"number3"</span>: <span class="number">99.05</span>,</span><br><span class="line">    <span class="string">"number4"</span>: <span class="number">123.6</span>,</span><br><span class="line">    <span class="string">"number5"</span>: <span class="number">123.516</span>,</span><br><span class="line">    <span class="string">"number6"</span>: <span class="number">123.1236370317</span>,</span><br><span class="line">    <span class="string">"boolean1"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"boolean2"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"object1"</span>: &#123;</span><br><span class="line">        <span class="string">"120000"</span>: <span class="string">"天津市"</span>,</span><br><span class="line">        <span class="string">"130000"</span>: <span class="string">"河北省"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"object2"</span>: &#123;</span><br><span class="line">        <span class="string">"320000"</span>: <span class="string">"江苏省"</span>,</span><br><span class="line">        <span class="string">"330000"</span>: <span class="string">"浙江省"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"array1"</span>: <span class="string">"KMD"</span>,</span><br><span class="line">    <span class="string">"array2"</span>: [</span><br><span class="line">        <span class="string">"Mock.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"array3"</span>: [</span><br><span class="line">        <span class="string">"Mock.js"</span>,</span><br><span class="line">        <span class="string">"Mock.js"</span>,</span><br><span class="line">        <span class="string">"Mock.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"function"</span>: <span class="string">"Syntax Demo"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-Mock-mock-rurl-template"><a href="#3-4-2-Mock-mock-rurl-template" class="headerlink" title="3.4.2 Mock.mock( rurl, template )"></a>3.4.2 Mock.mock( rurl, template )</h4><ul><li>记录数据模板。当拦截到匹配 <code>rurl</code> 的 <code>Ajax</code> 请求时，将根据数据模板 <code>template</code>生成模拟数据，并作为响应数据返回</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- （必选）加载 Mock --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mock.mock(rurl, template)</span></span><br><span class="line">Mock.mock(<span class="regexp">/\.json/</span>, &#123;</span><br><span class="line">    <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'email'</span>: <span class="string">'@EMAIL'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'1.json'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, jqXHR</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">        .appendTo(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"list"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"k.sejuwxvego@xcwc.中国互联.公司"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"f.hjns@rhivyrvhpb.ve"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"g.bdwuuhm@czoybmyp.ms"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"n.tkgs@javvkxz.bf"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-Mock-mock-rurl-function-options"><a href="#3-4-3-Mock-mock-rurl-function-options" class="headerlink" title="3.4.3 Mock.mock( rurl, function( options ) )"></a>3.4.3 Mock.mock( rurl, function( options ) )</h4><ul><li>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 的 <code>Ajax</code> 请求时，函数 <code>function(options)</code>将被执行，并把执行结果作为响应数据返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mock.mock(rurl, function(options))</span></span><br><span class="line">Mock.mock(<span class="regexp">/\.json/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line">&#125;)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'hello.json'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, jqXHR</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">        .appendTo(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'hello.json'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        foo: <span class="number">1</span>,</span><br><span class="line">        bar: <span class="number">2</span>,</span><br><span class="line">        faz: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, jqXHR</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">        .appendTo(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'hello.json'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        foo: <span class="number">1</span>,</span><br><span class="line">        bar: <span class="number">2</span>,</span><br><span class="line">        faz: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, jqXHR</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">        .appendTo(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"hello.json?foo=1&amp;bar=2&amp;faz=3"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"GET"</span>,</span><br><span class="line">    <span class="string">"body"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"hello.json"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"GET"</span>,</span><br><span class="line">    <span class="string">"body"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"hello.json"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="string">"body"</span>: <span class="string">"foo=1&amp;bar=2&amp;faz=3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-4-Mock-setup"><a href="#3-4-4-Mock-setup" class="headerlink" title="3.4.4 Mock.setup()"></a>3.4.4 Mock.setup()</h4><ul><li><code>Mock.setup( settings )</code><ul><li>配置拦截 <code>Ajax</code> 请求时的行为。支持的配置项有：<code>timeout</code></li></ul></li></ul><blockquote><p>指定被拦截的 <code>Ajax</code> 请求的响应时间，单位是毫秒。值可以是正整数，例如 <code>400</code>，表示 <code>400</code> 毫秒 后才会返回响应内容；也可以是横杠 <code>&#39;-&#39;</code> 风格的字符串，例如 <code>&#39;200-600&#39;</code>，表示响应时间介于 <code>200</code> 和 <code>600</code> 毫秒之间。默认值是<code>&#39;10-100&#39;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mock.setup(&#123;</span><br><span class="line">    timeout: <span class="number">400</span></span><br><span class="line">&#125;)</span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">    timeout: <span class="string">'200-600'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>目前，接口 <code>Mock.setup( settings )</code>仅用于配置 <code>Ajax</code> 请求</li></ul><h4 id="3-4-5-Mock-Random"><a href="#3-4-5-Mock-Random" class="headerlink" title="3.4.5 Mock.Random"></a>3.4.5 Mock.Random</h4><ul><li><code>Mock.Random</code> 是一个工具类，用于生成各种随机数据</li><li><code>Mock.Random</code>的方法在数据模板中称为『占位符』，书写格式为 <code>@</code>占位符(参数 [, 参数]) </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Random = Mock.Random</span><br><span class="line">Random.email()</span><br><span class="line"><span class="comment">// =&gt; "n.clark@miller.io"</span></span><br><span class="line">Mock.mock(<span class="string">'@email'</span>)</span><br><span class="line"><span class="comment">// =&gt; "y.lee@lewis.org"</span></span><br><span class="line">Mock.mock( &#123; <span class="attr">email</span>: <span class="string">'@email'</span> &#125; )</span><br><span class="line"><span class="comment">// =&gt; &#123; email: "v.lewis@hall.gov" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、简单构建一套mock-server"><a href="#四、简单构建一套mock-server" class="headerlink" title="四、简单构建一套mock-server"></a>四、简单构建一套mock-server</h2><blockquote><p>为了更好的分工合作，让前端能在不依赖后端环境的情况下进行开发，其中一种手段就是为前端开发者提供一个 web 容器，这个本地环境就是 mock-server</p></blockquote><p><strong>一个比较好的 mock-server 该有的能力</strong></p><ul><li>与线上环境一致的接口地址，每次构建前端代码时不需要修改调用接口的代码</li><li>所改即所得，具有热更新的能力，每次增加修改 <code>mock</code> 接口时不需要重启 <code>mock</code> 服务，更不用重启前端构建服务</li><li>能配合 <code>Webpack</code></li><li><code>mock</code> 数据可以由工具生成不需要自己手动写</li><li>能模拟 <code>POST</code>、<code>GET</code> 请求</li></ul><p><strong>搭建主要思路</strong></p><blockquote><p>以 <code>json-server</code> 作为 <code>mock</code> 服务器， <code>mock.js</code> 生成<code>mock</code> 数据，利用 <code>gulp + nodemon + browser-sync</code> 监听<code>mock</code>文件的改动重启 <code>node</code> 服务，刷新浏览器，以此达到一种相对完美的 <code>mock-server</code>要求</p></blockquote><h3 id="4-1-json-server-搭配-mock-js"><a href="#4-1-json-server-搭配-mock-js" class="headerlink" title="4.1 json-server 搭配 mock.js"></a>4.1 json-server 搭配 mock.js</h3><ul><li>这里以<code>Webpack</code> 的前端工程为例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install json-server mockjs --save</span><br></pre></td></tr></table></figure><ul><li>在项目根目录新建 <code>mock</code>文件夹，新建 <code>mock/db.js</code> 作为 <code>mock</code> 数据源，<code>mock/server.js</code>作为 <code>mock</code> 服务，<code>mock/routes.js</code>重写路由表</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getComment: Mock.mock(&#123;</span><br><span class="line">    <span class="string">"error"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"result|40"</span>: [&#123;</span><br><span class="line">      <span class="string">"author"</span>: <span class="string">"@name"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"@cparagraph"</span>,</span><br><span class="line">      <span class="string">"date"</span>: <span class="string">"@datetime"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  addComment: Mock.mock(&#123;</span><br><span class="line">    <span class="string">"error"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"result"</span>: []</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这里我们利用 <code>mock.js</code> 生成 <code>mock</code> 数据，可以尽可能的还原真实数据，还可以减少数据构造的复杂度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"/comment/get.action"</span>: <span class="string">"/getComment"</span>,</span><br><span class="line">  <span class="string">"/comment/add.action"</span>: <span class="string">"/addComment"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> jsonServer = <span class="built_in">require</span>(<span class="string">'json-server'</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db.js'</span>)</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">'./routes.js'</span>)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = jsonServer.create()</span><br><span class="line"><span class="keyword">const</span> router = jsonServer.router(db)</span><br><span class="line"><span class="keyword">const</span> middlewares = jsonServer.defaults()</span><br><span class="line"><span class="keyword">const</span> rewriter = jsonServer.rewriter(routes)</span><br><span class="line"></span><br><span class="line">server.use(middlewares)</span><br><span class="line"><span class="comment">// 将 POST 请求转为 GET</span></span><br><span class="line">server.use(<span class="function">(<span class="params">request, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  request.method = <span class="string">'GET'</span>;</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(rewriter) <span class="comment">// 注意：rewriter 的设置一定要在 router 设置之前</span></span><br><span class="line">server.use(router)</span><br><span class="line"></span><br><span class="line">server.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'open mock server at localhost:'</span> + port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node mock/server.js</span><br></pre></td></tr></table></figure><ul><li>打开 <code>http://localhost:3000/comment/get.action</code>即可查看到我们想要的数据</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7c4747bf268572ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>是不是这样就算搭建完了我们的 <code>mock-server</code> ？不，并没有。我们可以尝试修改一下 <code>db.js</code> 的文件内容，刷新浏览器发现 <code>mock</code> 数据并没有像我们想象的那样修改。那也就是说每次当我们需要添加 /修改 <code>mock</code> 数据使都需要重启一次 <code>mock</code> 服务</p></blockquote><h3 id="4-2-端口代理"><a href="#4-2-端口代理" class="headerlink" title="4.2 端口代理"></a>4.2 端口代理</h3><blockquote><p>通过 <code>Webpack</code> 配置 <code>proxy</code> 代理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  </span><br><span class="line">  devServer: &#123;  </span><br><span class="line">    <span class="comment">//其实很简单的，只要配置这个参数就可以了  </span></span><br><span class="line">    proxy: &#123;  </span><br><span class="line">      <span class="string">'/api/'</span>: &#123;  </span><br><span class="line">        target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接着在代码里进行 <code>ajax</code>请求就可以写成，这里以 <code>axios</code> 为例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComments</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios.get(<span class="string">'api/comment/get.action'</span>, &#123;&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-文件改动自动刷新"><a href="#4-3-文件改动自动刷新" class="headerlink" title="4.3 文件改动自动刷新"></a>4.3 文件改动自动刷新</h3><blockquote><p>我们希望更改 <code>mock</code>文件能和 <code>webpack</code> 热更新一样，所改即所得。这里我使用了 <code>nodemon</code>，利用 <code>gulp</code> 建立自动执行的任务。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp gulp-nodemon browser-sync --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js 的代码如下</span></span><br><span class="line">onst path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> nodemon = <span class="built_in">require</span>(<span class="string">'gulp-nodemon'</span>);</span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</span><br><span class="line"><span class="keyword">const</span> server = path.resolve(__dirname, <span class="string">'mock'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// browser-sync 配置，配置里启动 nodemon 任务</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'nodemon'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  browserSync.init(<span class="literal">null</span>, &#123;</span><br><span class="line">    proxy: <span class="string">"http://localhost:8080"</span>, <span class="comment">// 这里的端口和 webpack 的端口一致</span></span><br><span class="line">    port: <span class="number">8081</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// browser-sync 监听文件</span></span><br><span class="line">gulp.task(<span class="string">'mock'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch([<span class="string">'./mock/db.js'</span>, <span class="string">'./mock/**'</span>], [<span class="string">'bs-delay'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时刷新</span></span><br><span class="line">gulp.task(<span class="string">'bs-delay'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync.reload();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器重启</span></span><br><span class="line">gulp.task(<span class="string">'nodemon'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设个变量来防止重复重启</span></span><br><span class="line">  <span class="keyword">var</span> started = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> stream = nodemon(&#123;</span><br><span class="line">    script: <span class="string">'./mock/server.js'</span>,</span><br><span class="line">    <span class="comment">// 监听文件的后缀</span></span><br><span class="line">    ext: <span class="string">"js"</span>,</span><br><span class="line">    env: &#123;</span><br><span class="line">      <span class="string">'NODE_ENV'</span>: <span class="string">'development'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听的路径</span></span><br><span class="line">    watch: [</span><br><span class="line">      server</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">  stream.on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">      cb();</span><br><span class="line">      started = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).on(<span class="string">'crash'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'application has crashed!\n'</span>)</span><br><span class="line">    stream.emit(<span class="string">'restart'</span>, <span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>这样以后我们在构建我们 <code>Webpack</code> 工程时只需要先执行 <code>npm run dev</code></li><li>之后新建 <code>terminal</code> 执行 <code>gulp mock</code></li><li>就可以搭建一个随改随变的 <code>mock-server</code> 环境</li></ul><p><strong>完整的代码详情</strong> <a href="https://github.com/poetries/mock-server" target="_blank" rel="external">https://github.com/poetries/mock-server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章内容整理于互联网，方便学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、学前预热&quot;&gt;&lt;a href=&quot;#一、学前预热&quot; class=&quot;headerlink&quot; title=&quot;一、学前预热&quot;&gt;&lt;/a&gt;一、学前预热&lt;/h2&gt;&lt;blockq
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Mock" scheme="http://blog.poetries.top/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>初探RESTful API</title>
    <link href="http://blog.poetries.top/2017/10/23/restful-api/"/>
    <id>http://blog.poetries.top/2017/10/23/restful-api/</id>
    <published>2017-10-23T08:35:24.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、RESTful-API-简介"><a href="#一、RESTful-API-简介" class="headerlink" title="一、RESTful API 简介"></a>一、RESTful API 简介</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-29b46c90a92006d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ee530718ab42bd0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-f645ac53d435d6de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>总结一下什么是RESTful架构</strong></p><ul><li>每一个<code>URI</code>代表一种资源</li><li>客户端和服务器之间，传递这种资源的某种表现层</li><li>客户端通过四个<code>HTTP</code>动词(<code>GET、POST、PUT、DELETE</code>)，对服务器端资源进行操作，实现”表现层状态转化”</li></ul><h2 id="二、RESTful-API-设计"><a href="#二、RESTful-API-设计" class="headerlink" title="二、RESTful API 设计"></a>二、RESTful API 设计</h2><h3 id="2-1、协议"><a href="#2-1、协议" class="headerlink" title="2.1、协议"></a>2.1、协议</h3><ul><li><code>API</code>与用户的通信协议，总是使用<code>HTTPs</code>协议</li></ul><h3 id="2-2、域名"><a href="#2-2、域名" class="headerlink" title="2.2、域名"></a>2.2、域名</h3><ul><li>应该尽量将<code>API</code>部署在专用域名之下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com</span></span><br></pre></td></tr></table></figure><ul><li>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//example.org/api/</span></span><br></pre></td></tr></table></figure><h3 id="2-3、版本（Versioning）"><a href="#2-3、版本（Versioning）" class="headerlink" title="2.3、版本（Versioning）"></a>2.3、版本（Versioning）</h3><ul><li>应该将<code>API</code>的版本号放入<code>URL</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com/v1/</span></span><br></pre></td></tr></table></figure><h3 id="2-4、路径（Endpoint）"><a href="#2-4、路径（Endpoint）" class="headerlink" title="2.4、路径（Endpoint）"></a>2.4、路径（Endpoint）</h3><ul><li>表示<code>API</code>的具体网址</li><li><p>在<code>RESTful</code>架构中，每个网址代表一种资源（<code>resource</code>），所以网址中不能有动词，只能有名词</p></li><li><p>举例来说，有一个<code>API</code>提供动物园（<code>zoo</code>）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com/v1/zoos</span></span><br><span class="line">https:<span class="comment">//api.example.com/v1/animals</span></span><br><span class="line">https:<span class="comment">//api.example.com/v1/employees</span></span><br></pre></td></tr></table></figure><h3 id="2-5、HTTP动词"><a href="#2-5、HTTP动词" class="headerlink" title="2.5、HTTP动词"></a>2.5、HTTP动词</h3><ul><li>对于资源的具体操作类型，由<code>HTTP</code>动词表示</li></ul><ul><li><code>GET（SELECT）</code>：从服务器取出资源（一项或多项）。</li><li><code>POST（CREATE）</code>：在服务器新建一个资源。</li><li><code>PUT（UPDATE）</code>：在服务器更新资源（客户端提供改变后的完整资源）。</li><li><code>PATCH（UPDATE）</code>：在服务器更新资源（客户端提供改变的属性）。</li><li><code>DELETE（DELETE）</code>：从服务器删除资源。</li></ul><blockquote><p>下面是一些例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="2-6、过滤信息"><a href="#2-6、过滤信息" class="headerlink" title="2.6、过滤信息"></a>2.6、过滤信息</h3><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果</p></blockquote><ul><li>下面是一些常见的参数<ul><li><code>?limit=10</code>：指定返回记录的数量</li><li><code>?offset=10</code>：指定返回记录的开始位置。</li><li><code>?page=2&amp;per_page=100</code>：指定第几页，以及每页的记录数。</li><li><code>?sortby=name&amp;order=asc</code>：指定返回结果按照哪个属性排序，以及排序顺序。</li><li><code>?animal_type_id=1</code>：指定筛选条件</li></ul></li></ul><blockquote><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，<code>GET /zoo/ID/animals</code> 与 <code>GET /animals?zoo_id=ID</code> 的含义是相同的</p></blockquote><h3 id="2-7、状态码"><a href="#2-7、状态码" class="headerlink" title="2.7、状态码"></a>2.7、状态码</h3><blockquote><p>服务器向用户返回的状态码和提示信息</p></blockquote><h3 id="2-8、错误处理"><a href="#2-8、错误处理" class="headerlink" title="2.8、错误处理"></a>2.8、错误处理</h3><blockquote><p>如果状态码是<code>4xx</code>，就应该向用户返回出错信息。一般来说，返回的信息中将<code>error</code>作为键名，出错信息作为键值即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: <span class="string">"Invalid API key"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9、返回结果"><a href="#2-9、返回结果" class="headerlink" title="2.9、返回结果"></a>2.9、返回结果</h3><ul><li>针对不同操作，服务器向用户返回的结果应该符合以下规范</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /collection：返回资源对象的列表（数组）</span><br><span class="line">GET /collection/resource：返回单个资源对象</span><br><span class="line">POST /collection：返回新生成的资源对象</span><br><span class="line">PUT /collection/resource：返回完整的资源对象</span><br><span class="line">PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">DELETE /collection/resource：返回一个空文档</span><br></pre></td></tr></table></figure><h3 id="2-10、Hypermedia-API"><a href="#2-10、Hypermedia-API" class="headerlink" title="2.10、Hypermedia API"></a>2.10、Hypermedia API</h3><blockquote><p><code>RESTful API</code>最好做到<code>Hypermedia</code>，即返回结果中提供链接，连向其他<code>API</code>方法，使得用户不查文档，也知道下一步应该做什么</p></blockquote><ul><li>比如，当用户向<code>api.example.com</code>的根目录发出请求，会得到这样一个文档</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"link"</span>: &#123;</span><br><span class="line">  <span class="string">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="string">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码表示，文档中有一个<code>link</code>属性，用户读取这个属性就知道下一步该调用什么<code>API</code>了。<code>rel</code>表示这个<code>API</code>与当前网址的关系（collection关系，并给出该collection的网址），<code>href</code>表示<code>API</code>的路径，<code>title</code>表示<code>API</code>的标题，<code>type</code>表示返回类型</li></ul><h2 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">restful_api</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、RESTful-API-简介&quot;&gt;&lt;a href=&quot;#一、RESTful-API-简介&quot; class=&quot;headerlink&quot; title=&quot;一、RESTful API 简介&quot;&gt;&lt;/a&gt;一、RESTful API 简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="RESTful API" scheme="http://blog.poetries.top/tags/RESTful-API/"/>
    
  </entry>
  
  <entry>
    <title>Mocha+Chai+Istanbul单元测试</title>
    <link href="http://blog.poetries.top/2017/10/22/unit-test-mocha-chai/"/>
    <id>http://blog.poetries.top/2017/10/22/unit-test-mocha-chai/</id>
    <published>2017-10-22T07:35:43.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li><code>Istanbul</code>是<code>JavaScript</code>程序的代码覆盖率工具</li><li><code>Mocha</code>是一种测试框架，也就是运行测试的工具。用<code>descibe</code>和<code>it</code>方法，来定义<code>test suit</code>，为不同的测试分组。</li><li><code>mocha</code>本身并不提供<code>assert</code>断言，所以要提供更加有表现力的断言，可以搭配<code>chai</code>使用，当然也可以使用<code>nodejs</code>提供的<code>assert</code>模块</li></ul><h2 id="二、配置测试环境"><a href="#二、配置测试环境" class="headerlink" title="二、配置测试环境"></a>二、配置测试环境</h2><p><strong>安装相应的依赖包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mocha chai  istanbul</span><br></pre></td></tr></table></figure><ul><li>安装完成之后，在<code>package.json</code>文件的<code>scripts</code>下，添加执行测试和测试覆盖率检查的命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"cover"</span>: <span class="string">"istanbul cover _mocha -- -R spec --timeout 5000 --recursive"</span>,</span><br><span class="line">    <span class="string">"cover:check"</span>: <span class="string">"istanbul check-coverage"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，<code>window</code>下必须要这样才可以执行<code>cover</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"cover"</span>: <span class="string">"istanbul cover C:\Users\Administrator\Desktop\test\node_modules\mocha\bin\_mocha --reporter test/mocha.js"</span></span><br></pre></td></tr></table></figure><ul><li>运行<code>npm run cover</code>和<code>npm run cover:check</code>，就可以生成测试报告，前者生成测试报告，后者则是检查测试覆盖率是否达到要求</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-97b4892849c032af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>配置Istanbul</strong></p><blockquote><p><code>istanbul</code>相关的执行参数，可以在命令行下执行时传递参数来制定，也可以在<code>yaml</code>格式的<code>.istanbul.yml</code>文件中配置。简单贴出一些重要的配置项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">instrumentation:</span><br><span class="line">  root: .   # 执行的根目录</span><br><span class="line">  extensions:</span><br><span class="line">    - .js   # 检查覆盖率的文件扩张名</span><br><span class="line">  excludes: [<span class="string">'**/benchmark/**'</span>]</span><br><span class="line"></span><br><span class="line">  ... ...</span><br><span class="line"></span><br><span class="line">reporting:</span><br><span class="line">  print: summary</span><br><span class="line">  reports: [lcov, text, html, text-summary] # 生成报告的格式</span><br><span class="line">  dir: ./coverage   # 生成报告保存的目录</span><br><span class="line">  watermarks:       # 在不同覆盖率下会显示使用不同颜色</span><br><span class="line">    statements: [<span class="number">80</span>, <span class="number">95</span>]</span><br><span class="line">    ... ...</span><br><span class="line">check:</span><br><span class="line">  global:</span><br><span class="line">    statements: <span class="number">100</span></span><br><span class="line">    branches: <span class="number">100</span></span><br><span class="line">    lines: <span class="number">100</span></span><br><span class="line">    functions: <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>最后的<code>check</code>是项目要通过覆盖率检查需要达到的测试覆盖率，测试覆盖率包括四个维度，分别是语句覆盖率、分支覆盖率、行覆盖率和函数覆盖率。如果达不到设定的指标，在执行的时候会报错，项目的测试就无法通过自动化的持续集成</p></blockquote><h2 id="三、编写测试代码"><a href="#三、编写测试代码" class="headerlink" title="三、编写测试代码"></a>三、编写测试代码</h2><blockquote><ul><li>利用<code>chai</code>提供的<code>expect</code>断言，我们可以用<code>BDD</code>的方式，写出更加符合代码预期行为的测试用例.</li><li>通常，测试脚本与所要测试的源码脚本同名，但是后缀名为<code>.test.js</code>（表示测试）或者<code>.spec.js</code>（表示规格）。比如，<code>add.js</code>的测试脚本名字就是<code>add.test.js</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;should, expect, assert&#125; = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#math'</span>, () =&gt; &#123;</span><br><span class="line">  describe(<span class="string">'add'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'should return 5 when 2 + 3'</span>, () =&gt; &#123;</span><br><span class="line">      expect(add(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return 5 when 2 + 3'</span>, () =&gt; &#123;</span><br><span class="line">      expect(add(<span class="number">2</span>, <span class="number">-3</span>), <span class="number">-1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'mul'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'should return 6 when 2 * 3'</span>, () =&gt; &#123;</span><br><span class="line">      expect(mul(<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'cover'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'should return 1 when cover(2, 1)'</span>, () =&gt; &#123;</span><br><span class="line">      expect(cover(<span class="number">2</span>, <span class="number">1</span>)).to.equal(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return 3 when cover(1, 2)'</span>, () =&gt; &#123;</span><br><span class="line">      expect(cover(<span class="number">1</span>, <span class="number">2</span>)).to.equal(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return 4 when cover(2, 2)'</span>, () =&gt; &#123;</span><br><span class="line">      expect(cover(<span class="number">2</span>, <span class="number">2</span>)).to.equal(<span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>测试脚本里面应该包括一个或多个<code>describe</code>块，每个<code>describe</code>块应该包括一个或多个<code>it</code>块</li><li><code>describe</code>中的名字是自己定义的，为了方便查看</li><li><code>describe</code>块称为”测试套件”（<code>test suite</code>），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（”加法函数的测试”），第二个参数是一个实际执行的函数</li><li>it块称为”测试用例”（<code>test case</code>），表示一个单独的测试，是测试的最小单位</li></ul><h2 id="四、断言库的用法"><a href="#四、断言库的用法" class="headerlink" title="四、断言库的用法"></a>四、断言库的用法</h2><blockquote><p>所谓”断言”，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误</p></blockquote><ul><li>所有的测试用例（<code>it</code>块）都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现，<code>Mocha</code>本身不带断言库，所以必须先引入断言库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br></pre></td></tr></table></figure><ul><li>断言库有很多种，<code>Mocha</code>并不限制使用哪一种。上面代码引入的断言库是<code>chai</code>，并且指定使用它的<code>expect</code>断言风格。<code>chai</code>包含了几种风格，如<code>should</code> <code>expect</code> <code>assert</code>。<code>expect</code>断言的优点是很接近自然语言.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相等或不相等</span></span><br><span class="line">expect(<span class="number">4</span> + <span class="number">5</span>).to.be.equal(<span class="number">9</span>);</span><br><span class="line">expect(<span class="number">4</span> + <span class="number">5</span>).to.be.not.equal(<span class="number">10</span>);</span><br><span class="line">expect(foo).to.be.deep.equal(&#123; <span class="attr">bar</span>: <span class="string">'baz'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值为true</span></span><br><span class="line">expect(<span class="string">'everthing'</span>).to.be.ok;</span><br><span class="line">expect(<span class="literal">false</span>).to.not.be.ok;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof</span></span><br><span class="line">expect(<span class="string">'test'</span>).to.be.a(<span class="string">'string'</span>);</span><br><span class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;).to.be.an(<span class="string">'object'</span>);</span><br><span class="line">expect(foo).to.be.an.instanceof(Foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// include</span></span><br><span class="line">expect([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).to.include(<span class="number">2</span>);</span><br><span class="line">expect(<span class="string">'foobar'</span>).to.contain(<span class="string">'foo'</span>);</span><br><span class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">hello</span>: <span class="string">'universe'</span> &#125;).to.include.keys(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty</span></span><br><span class="line">expect([]).to.be.empty;</span><br><span class="line">expect(<span class="string">''</span>).to.be.empty;</span><br><span class="line">expect(&#123;&#125;).to.be.empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">// match</span></span><br><span class="line">expect(<span class="string">'foobar'</span>).to.match(<span class="regexp">/^foo/</span>);</span><br></pre></td></tr></table></figure><ul><li>基本上，<code>expect</code>断言的写法都是一样的。头部是<code>expect</code>方法，尾部是断言方法，比如<code>equal</code>、<code>a/an</code>、<code>ok</code>、<code>match</code>等。两者之间使用<code>to</code>或<code>to.be</code>连接</li><li>如果<code>expect</code>断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。</li></ul><h2 id="五、持续集成"><a href="#五、持续集成" class="headerlink" title="五、持续集成"></a>五、持续集成</h2><blockquote><p>完成所有代码之后，我们可以将代码发布到<code>github</code>，然后使用持续集成工具<code>travis</code>检查代码，将生成的测试报告上传到<code>coverall</code>上，这样就可以在项目中显示项目状态和测试覆盖率的badges</p></blockquote><ul><li>持续集成是一种软件开发流程</li><li>频繁将代码集成到主干</li><li>每次集成都通过自动化的构建来验证</li><li>尽早发现错误</li><li><p>防止防止大幅偏离主干</p></li><li><p>通常的<code>nodejs</code>项目<code>.travis.yml</code>配置如下</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - <span class="string">"6"</span></span><br><span class="line">  - <span class="string">"8"</span></span><br><span class="line">brancher:</span><br><span class="line">  only:</span><br><span class="line">    - <span class="string">"dev"</span></span><br><span class="line">    - <span class="string">"master"</span></span><br><span class="line">install:</span><br><span class="line">  - <span class="string">"npm install"</span></span><br><span class="line">  - <span class="string">"npm install -g codecov"</span></span><br><span class="line">script:</span><br><span class="line">  - <span class="string">"npm run cover"</span></span><br><span class="line">  - <span class="string">"codecov"</span></span><br></pre></td></tr></table></figure><ul><li>测试代码预览 <a href="https://github.com/poetries/test" target="_blank" rel="external">https://github.com/poetries/test</a></li></ul><h2 id="六、Mocha的命令行参数"><a href="#六、Mocha的命令行参数" class="headerlink" title="六、Mocha的命令行参数"></a>六、Mocha的命令行参数</h2><ul><li><code>--help</code>或<code>-h</code>参数，用来查看<code>Mocha</code>的所有命令行参数</li><li><code>--reporter, -R</code> <code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mocha</span><br><span class="line"># 等同于</span><br><span class="line">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Istanbul&lt;/code&gt;是&lt;code&gt;JavaScript&lt;/code&gt;程序的代码覆盖率工具&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="测试" scheme="http://blog.poetries.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6回顾</title>
    <link href="http://blog.poetries.top/2017/10/21/es6-review/"/>
    <id>http://blog.poetries.top/2017/10/21/es6-review/</id>
    <published>2017-10-21T12:20:43.000Z</published>
    <updated>2017-11-10T07:51:40.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>整理于互联网，整理最常用的部分，完善中….</li><li>参考资料: <a href="http://es6.ruanyifeng.com" target="_blank" rel="external">http://es6.ruanyifeng.com</a></li></ul></blockquote><h2 id="第一部分：扩展"><a href="#第一部分：扩展" class="headerlink" title="第一部分：扩展"></a>第一部分：扩展</h2><h3 id="1-1、let和const"><a href="#1-1、let和const" class="headerlink" title="1.1、let和const"></a>1.1、let和const</h3><ul><li><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变</li><li><code>let</code>不允许在相同作用域内，重复声明同一个变量</li><li><code>for</code>循环的计数器，就很合适使用<code>let</code>命令</li><li>不存在变量提升</li><li>会创建块级作用域</li></ul><h3 id="1-2、变量的解构赋值"><a href="#1-2、变量的解构赋值" class="headerlink" title="1.2、变量的解构赋值"></a>1.2、变量的解构赋值</h3><p><strong>数组解构赋值应用场景</strong></p><ul><li>变量交换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a,b] = [b,a]</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>选择性接收某些变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[a,,,b] = fn();</span><br><span class="line"><span class="comment">// a = 1,b = 4</span></span><br></pre></td></tr></table></figure><ul><li>不确定返回数组长度，只关心第一个</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a,...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>对象解构赋值场景</strong></p><ul><li>服务端返回的<code>json</code>解构应用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> metaData = &#123;</span><br><span class="line">    title: <span class="string">"hah"</span>,</span><br><span class="line">    test: [</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">"poetries"</span>,</span><br><span class="line">            desc: <span class="string">"test_data"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle,<span class="attr">desc</span>:cnDesc&#125;]&#125; = metaData;</span><br></pre></td></tr></table></figure><h3 id="1-3、字符串扩展"><a href="#1-3、字符串扩展" class="headerlink" title="1.3、字符串扩展"></a>1.3、字符串扩展</h3><ul><li>模板字符串是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span><br><span class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span></span><br><span class="line"><span class="string">string text line 2`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure><h3 id="1-4、数值扩展"><a href="#1-4、数值扩展" class="headerlink" title="1.4、数值扩展"></a>1.4、数值扩展</h3><p><strong>Number.isFinite(), Number.isNaN()</strong></p><ul><li><code>Number.isFinite()</code>用来检查一个数值是否为有限的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Number.isFinite(15); // true</span><br><span class="line">Number.isFinite(0.8); // true</span><br><span class="line">Number.isFinite(NaN); // false</span><br><span class="line">Number.isFinite(Infinity); // false</span><br><span class="line">Number.isFinite(-Infinity); // false</span><br><span class="line">Number.isFinite(&apos;foo&apos;); // false</span><br><span class="line">Number.isFinite(&apos;15&apos;); // false</span><br><span class="line">Number.isFinite(true); // false</span><br></pre></td></tr></table></figure><ul><li><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Number.isNaN(NaN) // true</span><br><span class="line">Number.isNaN(15) // false</span><br><span class="line">Number.isNaN(&apos;15&apos;) // false</span><br><span class="line">Number.isNaN(true) // false</span><br><span class="line">Number.isNaN(9/NaN) // true</span><br><span class="line">Number.isNaN(&apos;true&apos;/0) // true</span><br><span class="line">Number.isNaN(&apos;true&apos;/&apos;true&apos;) // true</span><br></pre></td></tr></table></figure><p><strong>Number.parseInt(), Number.parseFloat()</strong></p><ul><li><code>ES6</code>将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到<code>Number</code>对象上面，行为完全保持不变</li></ul><h3 id="1-5、数组扩展"><a href="#1-5、数组扩展" class="headerlink" title="1.5、数组扩展"></a>1.5、数组扩展</h3><p><strong>扩展运算符</strong></p><ul><li>扩展运算符是三个点（<code>...</code>）。它好比 <code>rest</code> 参数的逆运算，将一个数组转为用逗号分隔的参数序列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(...[1, 2, 3])</span><br><span class="line">// 1 2 3</span><br><span class="line"></span><br><span class="line">console.log(1, ...[2, 3, 4], 5)</span><br><span class="line">// 1 2 3 4 5</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(&apos;div&apos;)]</span><br><span class="line">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span><br></pre></td></tr></table></figure><ul><li>扩展运算符取代<code>apply</code>方法的一个实际的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><p><strong>Array.from()</strong></p><ul><li><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（<code>array-like object</code>）和可遍历（<code>iterable</code>）的对象（包括ES6新增的数据结构<code>Set</code>和<code>Map</code>）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><ul><li>实际应用中，常见的类似数组的对象是<code>DOM</code>操作返回的<code>NodeList</code>集合，以及函数内部的<code>arguments</code>对象。<code>Array.from</code>都可以将它们转为真正的数组。</li></ul><blockquote><p><code>querySelectorAll</code>方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用<code>forEach</code>方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Array.of()</strong></p><ul><li><code>Array.of</code>方法用于将一组值，转换为数组</li><li><code>Array.of</code>基本上可以用来替代<code>Array()</code>或<code>new Array()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>数组实例的 find() 和 findIndex()</strong></p><blockquote><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure><blockquote><p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>数组实例的fill()</strong></p><ul><li><code>fill</code>方法使用给定值，填充一个数组</li><li><code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去</li><li><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受第二个和第三个参数</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p><strong>数组实例的 entries()，keys() 和 values()</strong></p><ul><li><code>ES6</code> 提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组</li><li><code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><p><strong>数组实例的 includes()</strong></p><ul><li><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="1-6、对象扩展"><a href="#1-6、对象扩展" class="headerlink" title="1.6、对象扩展"></a>1.6、对象扩展</h3><p><strong>属性的简洁表示法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了属性简写，方法也可以简写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; getItem, setItem, clear &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getItem: getItem,</span><br><span class="line">  setItem: setItem,</span><br><span class="line">  clear: clear</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>属性名表达式</strong></p><ul><li><code>JavaScript</code> 定义对象的属性，有两种方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">obj.foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">obj[<span class="string">'a'</span> + <span class="string">'bc'</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li><code>ES6</code>允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">'a'</span> + <span class="string">'bc'</span>]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>表达式还可以用于定义方法名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><p><strong>Object.is()</strong></p><ul><li><code>Object.is</code> 它用来比较两个值是否严格相等，与严格比较运算符（<code>===</code>）的行为基本一致</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>不同之处只有两个：一是<code>+0</code>不等于<code>-0</code>，二是<code>NaN</code>等于自身</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>Object.assign()</strong></p><ul><li><code>Object.assign</code>方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>属性的遍历</strong></p><p><code>ES6</code> 一共有<code>5</code>种方法可以遍历对象的属性</p><ul><li><p><code>for...in</code></p><ul><li><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 <code>Symbol</code> 属性）</li></ul></li><li><p><code>Object.keys(obj)</code></p><ul><li><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 <code>Symbol</code> 属性）的键名</li></ul></li><li><p><code>Object.getOwnPropertyNames(obj)</code></p><ul><li><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 <code>Symbol</code> 属性，但是包括不可枚举属性）的键名</li></ul></li><li><p><code>Object.getOwnPropertySymbols(obj)</code></p><ul><li><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 <code>Symbol</code> 属性的键名</li></ul></li><li><p><code>Reflect.ownKeys(obj)</code></p><ul><li><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 <code>Symbol</code> 或字符串，也不管是否可枚举</li></ul></li></ul><h3 id="1-7、函数扩展"><a href="#1-7、函数扩展" class="headerlink" title="1.7、函数扩展"></a>1.7、函数扩展</h3><p><strong>函数参数的默认值</strong></p><ul><li><code>ES6</code> 允许为函数的参数设置默认值，即直接写在参数定义的后面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></span><br><span class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></span><br><span class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p><strong>与解构赋值默认值结合使用</strong></p><ul><li>参数默认值可以与解构赋值的默认值，结合起来使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><p><strong>rest 参数</strong></p><ul><li><code>ES6</code> 引入 <code>rest</code> 参数（形式为<code>...</code>变量名），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。<code>rest</code> 参数搭配的变量是一个数组，该变量将多余的参数放入数组中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>箭头函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>绑定 this</strong></p><ul><li>箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（<code>call</code>、<code>apply</code>、<code>bind</code>）</li></ul><h2 id="第二部分：新增"><a href="#第二部分：新增" class="headerlink" title="第二部分：新增"></a>第二部分：新增</h2><h3 id="2-1、Symbol"><a href="#2-1、Symbol" class="headerlink" title="2.1、Symbol"></a>2.1、Symbol</h3><ul><li><code>ES6</code>引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值</li><li>凡是属性名属于 <code>Symbol</code> 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突</li></ul><h3 id="2-2、Proxy"><a href="#2-2、Proxy" class="headerlink" title="2.2、Proxy"></a>2.2、Proxy</h3><blockquote><p>对要保护的对象套一层，不被外界所访问。<code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">    name:<span class="string">'net'</span>,</span><br><span class="line">    _r:<span class="number">123</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> monitor=<span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="comment">// 拦截对象属性的读取</span></span><br><span class="line">    get(target,key)&#123;</span><br><span class="line">      <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截对象设置属性</span></span><br><span class="line">    set(target,key,value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key]=value;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截key in object操作</span></span><br><span class="line">    has(target,key)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截delete</span></span><br><span class="line">    deleteProperty(target,key)&#123;</span><br><span class="line">      <span class="keyword">if</span>(key.indexOf(<span class="string">'_'</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> target[key];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截Object.keys,Object.getOwnPropertySymbols,Object.getOwnPropertyNames</span></span><br><span class="line">    ownKeys(target)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'get'</span>,monitor.time);</span><br><span class="line"></span><br><span class="line">  monitor.time=<span class="string">'2018'</span>;</span><br><span class="line">  monitor.name=<span class="string">'poetries'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'set'</span>,monitor.time,monitor);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="string">'name'</span> <span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// delete monitor.time;</span></span><br><span class="line">  <span class="comment">// console.log('delete',monitor);</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// delete monitor._r;</span></span><br><span class="line">  <span class="comment">// console.log('delete',monitor);</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,<span class="built_in">Object</span>.keys(monitor));</span><br></pre></td></tr></table></figure><h3 id="2-3、Reflect"><a href="#2-3、Reflect" class="headerlink" title="2.3、Reflect"></a>2.3、Reflect</h3><blockquote><p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是<code>ES6</code> 为了操作对象而提供的新 <code>API</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">name:<span class="string">'net'</span>,</span><br><span class="line">_r:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Reflect get'</span>,<span class="built_in">Reflect</span>.get(obj,<span class="string">'time'</span>));</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'poetries'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure><h3 id="2-4、Set和Map"><a href="#2-4、Set和Map" class="headerlink" title="2.4、Set和Map"></a>2.4、Set和Map</h3><p><strong>Set</strong></p><blockquote><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>Set</code>中，没有重复的<code>key</code></p></blockquote><ul><li>要创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建一个空<code>Set</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s1 = new Set(); // 空Set</span><br><span class="line">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure><ul><li>重复元素在<code>Set</code>中自动被过滤</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set([1, 2, 3, 3, &apos;3&apos;]);</span><br><span class="line">s; // Set &#123;1, 2, 3, &quot;3&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>add(key)</code>方法可以添加元素到<code>Set</code>中，可以重复添加，但不会有效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>delete(key)</code>方法可以删除元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set([1, 2, 3]);</span><br><span class="line">s; // Set &#123;1, 2, 3&#125;</span><br><span class="line">s.delete(3);</span><br><span class="line">s; // Set &#123;1, 2&#125;</span><br></pre></td></tr></table></figure><p><strong>Map</strong></p><ul><li><code>Map</code>是一组键值对的结构，具有极快的查找速度</li><li>用<code>Map</code>实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用<code>JavaScript</code>写一个<code>Map</code>如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map([[&apos;Michael&apos;, 95], [&apos;Bob&apos;, 75], [&apos;Tracy&apos;, 85]]);</span><br><span class="line">m.get(&apos;Michael&apos;); // 95</span><br></pre></td></tr></table></figure><ul><li>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。<code>Map</code>具有以下方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map(); // 空Map</span><br><span class="line">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class="line">m.set(&apos;Bob&apos;, 59);</span><br><span class="line">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class="line">m.get(&apos;Adam&apos;); // 67</span><br><span class="line">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class="line">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure><ul><li>由于一个<code>key</code>只能对应一个<code>value</code>，所以，多次对一个<code>key</code>放入<code>value</code>，后面的值会把前面的值冲掉</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map();</span><br><span class="line">m.set(&apos;Adam&apos;, 67);</span><br><span class="line">m.set(&apos;Adam&apos;, 88);</span><br><span class="line">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure><h3 id="2-5、Promise"><a href="#2-5、Promise" class="headerlink" title="2.5、Promise"></a>2.5、Promise</h3><blockquote><p><code>Promise</code> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大</p></blockquote><ul><li><code>Promise</code>对象代表一个异步操作，有三种状态<ul><li><code>pending</code>（进行中）</li><li><code>fulfilled</code>（已成功）</li><li><code>rejected</code>（已失败）</li></ul></li></ul><p><strong>基本用法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-6、Generator"><a href="#2-6、Generator" class="headerlink" title="2.6、Generator"></a>2.6、Generator</h3><blockquote><p><code>generator</code>（生成器）是<code>ES6</code>标准引入的新的数据类型。一个<code>generator</code>看上去像一个函数，但可以返回多次</p></blockquote><h3 id="2-7、Class"><a href="#2-7、Class" class="headerlink" title="2.7、Class"></a>2.7、Class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 基本定义和生成实例</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> v_parent=<span class="keyword">new</span> Parent(<span class="string">'v'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 继承</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'继承'</span>,<span class="keyword">new</span> Child());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 继承传递参数</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line">      <span class="keyword">super</span>(name);</span><br><span class="line">      <span class="keyword">this</span>.type=<span class="string">'child'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// getter,setter</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get longName()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'mk'</span>+<span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set longName(value)&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> v=<span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'getter'</span>,v.longName);</span><br><span class="line">  v.longName=<span class="string">'hello'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setter'</span>,v.longName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Parent.tell();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='poetries')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Parent.type=<span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'静态属性'</span>,Parent.type);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8、Module"><a href="#2-8、Module" class="headerlink" title="2.8、Module"></a>2.8、Module</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  test()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'class'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">  test,</span><br><span class="line">  Hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整理于互联网，整理最常用的部分，完善中….&lt;/li&gt;
&lt;li&gt;参考资料: &lt;a href=&quot;http://es6.ruanyifeng.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://es6.rua
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>浅析JSON.stringify</title>
    <link href="http://blog.poetries.top/2017/10/21/json-stringify/"/>
    <id>http://blog.poetries.top/2017/10/21/json-stringify/</id>
    <published>2017-10-21T06:40:43.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JSON-stringify参数详解"><a href="#一、JSON-stringify参数详解" class="headerlink" title="一、JSON.stringify参数详解"></a>一、JSON.stringify参数详解</h2><ul><li><code>stringify</code>方法顾名思义，就是把<code>JSON</code>序列化，其语法如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(value [, replacer] [, space])</span><br></pre></td></tr></table></figure><ul><li><code>value</code>：是必选字段。就是你输入的对象、如数组等</li><li><code>replacer</code>：这个是可选的。它又分为<code>2</code>种方式，一种是数组，第二种是方法【过滤函数，或者key的过滤数组（只有在数组中的会展示）】<ul><li>情况一：<code>replacer</code>为数组时，通过后面的实验可以知道，它是和第一个参数<code>value</code>有关系的。一般来说，系列化后的结果是通过键值对来进行表示的。 所以，如果此时第二个参数的值在第一个存在，那么就以第二个参数的值做key，第一个参数的值为value进行表示，如果不存在，就忽略。</li><li>情况二：<code>replacer</code>为方法时，那很简单，就是说把系列化后的每一个对象（记住是每一个）传进方法里面进行处理。 </li></ul></li><li><code>space</code>：就是用什么来做分隔符的【格式化前面的空格字符】<ul><li>如果省略的话，那么显示出来的值就没有分隔符，直接输出来</li><li>如果是一个数字的话，那么它就定义缩进几个字符，当然如果大于<code>10</code> ，则默认为<code>10</code>，因为最大值为<code>10</code></li><li>如果是一些转义字符，比如<code>\t</code>，表示回车，那么它每行一个回车。 </li><li>如果仅仅是字符串，就在每行输出值的时候把这些字符串附加上去。当然，最大长度也是<code>10</code>个字符</li></ul></li></ul><h2 id="二、只传一个参数"><a href="#二、只传一个参数" class="headerlink" title="二、只传一个参数"></a>二、只传一个参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"poetries"</span>,</span><br><span class="line">  age:<span class="number">22</span>,</span><br><span class="line">  job:<span class="string">"FED"</span>,</span><br><span class="line">  location:<span class="string">"shenzhen of China"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj)  <span class="comment">//"&#123;"name":"poetries","age":22,"job":"FED","location":"shenzhen of China"&#125;"</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><blockquote><p><code>JSON.stringify</code>对<code>obj</code>里面的数据类型有一些要求</p></blockquote><ul><li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123;<span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">6</span>&#125;) <span class="comment">// '&#123;"x":5,"y":6&#125;' 或者 '&#123;"y":6,"x":5&#125;' 都可能</span></span><br></pre></td></tr></table></figure><ul><li>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值</li><li><code>undefined</code>、任意的函数以及 <code>symbol</code> 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 <code>null</code>（出现在数组中时）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"undefined"</span>:<span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">"null"</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="string">"true"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"func"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="string">"symbol"</span>:<span class="built_in">Symbol</span>(<span class="string">""</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">//"&#123;"null":null,"true":true&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现在数组中时被转化成null</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">undefined</span>,<span class="built_in">Symbol</span>(<span class="string">""</span>),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;];</span><br><span class="line"><span class="built_in">JSON</span>.stringify(arr); <span class="comment">//[null,null,null]</span></span><br></pre></td></tr></table></figure><ul><li>不可枚举的属性会被忽略</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify( <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123; <span class="attr">x</span>: &#123; <span class="attr">value</span>: <span class="string">'x'</span>, <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;, <span class="attr">y</span>: &#123; <span class="attr">value</span>: <span class="string">'y'</span>, <span class="attr">enumerable</span>: <span class="literal">true</span> &#125; &#125;) );</span><br><span class="line"><span class="comment">// '&#123;"y":"y"&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="三、传递两个参数的时候"><a href="#三、传递两个参数的时候" class="headerlink" title="三、传递两个参数的时候"></a>三、传递两个参数的时候</h2><blockquote><ul><li>第二个参数可以是一个过滤函数，也可以是一个数组</li><li>当为数组时则只有包含在这个数组中的属性名才会被序列化到最终的 <code>JSON</code> 字符串中</li></ul></blockquote><h3 id="3-1-过滤函数"><a href="#3-1-过滤函数" class="headerlink" title="3.1 过滤函数"></a>3.1 过滤函数</h3><ul><li>注意点：<ul><li>这里一定要<code>return</code>一个值给下一个遍历函数作为参数传入，如果不<code>return</code>的话，后面的遍历就没法玩下去了</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"poetries"</span>,</span><br><span class="line">  age:<span class="number">22</span>,</span><br><span class="line">  job:<span class="string">"FED"</span>,</span><br><span class="line">  location:<span class="string">"shenzhen of China"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, (key,value) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key)</span><br><span class="line">   <span class="keyword">return</span> value; <span class="comment">// 这个是必须的，用于下一次的循环迭代</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"poetries"</span>,</span><br><span class="line">  age:<span class="number">22</span>,</span><br><span class="line">  job:<span class="string">"FED"</span>,</span><br><span class="line">  location:<span class="string">"shenzhen of China"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, [<span class="string">"name"</span>, <span class="string">"age"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//job、location由于不在列表里，所以没被序列化</span></span><br><span class="line"><span class="comment">//"&#123;"name":"poetries","age":22&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="四、传递三个参数的时候"><a href="#四、传递三个参数的时候" class="headerlink" title="四、传递三个参数的时候"></a>四、传递三个参数的时候</h2><blockquote><p>第三参数space用来控制结果字符串里面的间距</p></blockquote><ul><li>如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）</li><li>如果是一个字符串，则每一级别会比上一级别多缩进用该字符串（或该字符串的前十个字符）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">job</span>:<span class="string">"FED"</span>,<span class="attr">location</span>:<span class="string">"shenzhen of China"</span>,<span class="attr">lov</span>:&#123;<span class="attr">age</span>:<span class="number">11</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// //每一个层级比上一个多10个空格</span></span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string">          "</span>name<span class="string">": "</span>poetries<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>age<span class="string">": 22,</span></span><br><span class="line"><span class="string">          "</span>job<span class="string">": "</span>FED<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>location<span class="string">": "</span>shenzhen <span class="keyword">of</span> China<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>lov<span class="string">": &#123;</span></span><br><span class="line"><span class="string">                    "</span>age<span class="string">": 11</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"poetries"</span>,</span><br><span class="line">  age:<span class="number">22</span>,</span><br><span class="line">  job:<span class="string">"FED"</span>,</span><br><span class="line">  location:<span class="string">"shenzhen of China"</span>,</span><br><span class="line">  lov:&#123;</span><br><span class="line">    age:<span class="number">11</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>,<span class="string">"\n"</span>);</span><br><span class="line"><span class="comment">// 每一个层级比上一个多了一个回车符</span></span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>name<span class="string">": "</span>poetries<span class="string">",</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>age<span class="string">": 22,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>job<span class="string">": "</span>FED<span class="string">",</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>location<span class="string">": "</span>shenzhen <span class="keyword">of</span> China<span class="string">",</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>lov<span class="string">": &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>age<span class="string">": 11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="五、toJSON-方法"><a href="#五、toJSON-方法" class="headerlink" title="五、toJSON 方法"></a>五、toJSON 方法</h2><blockquote><p>如果一个被序列化的对象拥有 <code>toJSON</code> 方法，那么该 <code>toJSON</code> 方法就会覆盖该对象默认的序列化行为</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"poetries"</span>,</span><br><span class="line">  info:&#123;</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    sex:<span class="string">"male"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  toJSON:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"via toJSON"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// ""via toJSON""</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JSON-stringify参数详解&quot;&gt;&lt;a href=&quot;#一、JSON-stringify参数详解&quot; class=&quot;headerlink&quot; title=&quot;一、JSON.stringify参数详解&quot;&gt;&lt;/a&gt;一、JSON.stringify参数详解&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承的几种方式</title>
    <link href="http://blog.poetries.top/2017/10/18/js-inherit-methods/"/>
    <id>http://blog.poetries.top/2017/10/18/js-inherit-methods/</id>
    <published>2017-10-18T11:46:43.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript继承本质和原型链有关</p></blockquote><ul><li>原型、实例、构造函数、原型链之间的关系</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b00bcb5737bd34f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型、实例、构造函数、原型链之间的关系"></p><h2 id="一、借助构造函数实现继承"><a href="#一、借助构造函数实现继承" class="headerlink" title="一、借助构造函数实现继承"></a>一、借助构造函数实现继承</h2><ul><li>缺点：实例无法访问父类原型上的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent1'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent1.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent1.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Parent1原型上的say没法拿到</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child1(), <span class="keyword">new</span> Child1().say());</span><br></pre></td></tr></table></figure><h2 id="二、借助原型链实现继承"><a href="#二、借助原型链实现继承" class="headerlink" title="二、借助原型链实现继承"></a>二、借助原型链实现继承</h2><ul><li>缺点：子类和父类公用一个原型,最后导致子类的多个实例都是一样的，无法隔离</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line">s1.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1.play, s2.play); <span class="comment">// [1, 2, 3, 4] [1, 2, 3,4] 结果是一样的，说明两个实例无法隔离</span></span><br></pre></td></tr></table></figure><h2 id="三、组合继承方式"><a href="#三、组合继承方式" class="headerlink" title="三、组合继承方式"></a>三、组合继承方式</h2><ul><li>此方法解决了上面的实例相同的问题，但是父类的构造函数执行了多次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child3'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3(); <span class="comment">// 把Parent3的实例指向Child3的原型</span></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child3();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Child3();</span><br><span class="line">s3.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s3.play, s4.play); <span class="comment">// [1, 2, 3, 4] [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>优化组合继承1：此方法解决了父类的构造函数执行了多次问题，但是无法判断实例是由子类创建的，还是父类创建的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child4'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child4.prototype = Parent4.prototype; <span class="comment">// Child4和Parent4公用一个原型了</span></span><br><span class="line"><span class="keyword">var</span> s5 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">var</span> s6 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="built_in">console</span>.log(s5, s6);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s5 <span class="keyword">instanceof</span> Child4, s5 <span class="keyword">instanceof</span> Parent4); <span class="comment">// 都是返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(s5.constructor); <span class="comment">// 这里返回的构造函数是Parent4，而不是Child4，问题所在</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 优化组合继承2：完美解决方案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child5'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br><span class="line">Child5.prototype.constructor = Child5; <span class="comment">//重新修改了Child5的构造函数为Child5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JavaScript继承本质和原型链有关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原型、实例、构造函数、原型链之间的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://blog.poetries.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs之基础API（三）</title>
    <link href="http://blog.poetries.top/2017/10/15/node-base-api/"/>
    <id>http://blog.poetries.top/2017/10/15/node-base-api/</id>
    <published>2017-10-15T12:50:35.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><blockquote><p>提供了一些工具函数，用于处理文件与目录的路径</p></blockquote><p><strong>basename、dirname与extname</strong></p><ul><li>返回一个 <code>path</code>的最后一部分</li><li>返回一个 <code>path</code> 的目录名</li><li>返回 <code>path</code> 的扩展名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;basename,dirname,extname&#125; = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">"/usr/local/bin/test.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(basename(filePath)); <span class="comment">// test.txt</span></span><br><span class="line"><span class="built_in">console</span>.log(dirname(filePath)); <span class="comment">// /usr/local/bin</span></span><br><span class="line"><span class="built_in">console</span>.log(extname(filePath)); <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><p><strong>join、normalize与resolve</strong></p><ul><li><code>path.join()</code>方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径</li><li><code>path.normalize()</code> 方法会规范化给定的 <code>path</code>，并解析 <code>&#39;..&#39;</code>和 <code>&#39;.&#39;</code>片段</li><li><code>path.resolve()</code> 方法会把一个相对路径解析为一个绝对路径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'/foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz/asdf'</span>, <span class="string">'quux'</span>, <span class="string">'..'</span>);</span><br><span class="line"><span class="comment">// 返回: '/foo/bar/baz/asdf'</span></span><br><span class="line"></span><br><span class="line">path.join(<span class="string">'foo'</span>, &#123;&#125;, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// 抛出 'TypeError: Path must be a string. Received &#123;&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>path.format与path.parse</strong></p><ul><li><code>path.format()</code>方法会从一个对象返回一个路径字符串。 与 <code>path.parse()</code> 相反</li><li><code>path.parse()</code>方法返回一个对象，对象的属性表示 <code>path</code> 的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;parse,format&#125; = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">"/usr/local/bin/test.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parse_ret = parse(filePath);</span><br><span class="line"><span class="keyword">const</span> format_ret = format(parse_ret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parse_ret);</span><br><span class="line"><span class="built_in">console</span>.log(format_ret);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">root</span>: <span class="string">'/'</span>,</span><br><span class="line">  dir: <span class="string">'/usr/local/bin'</span>,</span><br><span class="line">  base: <span class="string">'test.txt'</span>,</span><br><span class="line">  ext: <span class="string">'.txt'</span>,</span><br><span class="line">  name: <span class="string">'test'</span> &#125;</span><br><span class="line">/usr/local/bin\test.txt</span><br></pre></td></tr></table></figure><p><strong>sep、delimiter、win32、posix</strong></p><blockquote><p>和操作系统有关的东西</p></blockquote><ul><li><code>sep</code>：提供了平台特定的路径片段分隔符<ul><li><code>Windows</code> 上是<code>\</code></li><li><code>POSIX</code> 上是 <code>/</code></li></ul></li><li><code>path.win32</code>提供了 <code>path</code> 方法针对<code>Windows</code> 的实现</li><li><code>posix</code>   属性提供了 <code>path</code>方法针对 <code>POSIX</code> 的实现</li><li><code>delimiter</code> 就是 <code>&quot;:&quot;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;sep,delimiter,win32,posix&#125; = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">"/usr/local/bin/test.txt"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"sep "</span>,sep);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"posix sep "</span>,posix.sep);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"win32 sep "</span>,win32.sep);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"PATH"</span>,process.env.PATH);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"delimiter "</span>,delimiter);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sep  \</span><br><span class="line">posix sep  /</span><br><span class="line">win32 sep  \</span><br><span class="line">PATH C:\Python27\;C:\Python27\Scripts;C:\Windows\system32;C:\Windows;C:\Windows\</span><br><span class="line">System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1<span class="number">.0</span>\;C:\Program Files\Git\b</span><br><span class="line"><span class="keyword">in</span>;C:\Program Files\nodejs;;e:\Program Files\VS Code\bin;C:\Users\Administrator\</span><br><span class="line">AppData\Roaming\npm;.;;.;;.;</span><br><span class="line">delimiter  ;</span><br></pre></td></tr></table></figure><p><strong>回顾小结</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径相关</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"__dirname"</span>, __dirname); <span class="comment">//文件夹</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"__filename"</span>, __filename); <span class="comment">//文件名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"process.cwd()"</span>, process.cwd()); <span class="comment">//绝对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"./"</span>, path.resolve()); <span class="comment">//根据相对路径取得绝对路径</span></span><br></pre></td></tr></table></figure><ul><li><code>__dirname</code>、<code>__filename</code> 总是返回文件的绝对路径</li><li><code>process.cwd()</code>总是返回<code>node</code>命令所在文件夹（就是用户在哪里启动的<code>node</code>脚本的路径）</li></ul><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><blockquote><ul><li>buffer用来处理二进制数据流的</li><li>类似于整数数组，大小固定</li></ul><p>Buffer 类在 Node.js 中是一个全局变量，因此无需使用 require(‘buffer’).Buffer</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><strong>Buffer类常用的方法</strong></p><ul><li><code>byteLength</code> 计算字符串占了几个字节</li><li><code>Buffer.isBuffer</code>判断是否是<code>buffer</code>对象</li><li><code>Buffer.concat</code>拼接<code>Buffer</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// byteLength 计算字符串占了几个字节</span></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.byteLength(<span class="string">"test"</span>)) <span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.byteLength(<span class="string">"测试"</span>))  <span class="comment">// 6字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Buffer.isBuffer判断是否是buffer对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.isBuffer(&#123;&#125;))</span><br><span class="line"><span class="built_in">console</span>.log(Buffer.isBuffer(Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buffer.concat拼接Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">"This "</span>)</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">"is "</span>)</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.from(<span class="string">"a "</span>)</span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.from(<span class="string">"test "</span>)</span><br><span class="line"><span class="keyword">const</span> buf5 = Buffer.from(<span class="string">"buffer"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf = Buffer.concat([buf1,buf2,buf3,buf4,buf5]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">This is a test buffer</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p><strong>Buffer实例常用方法</strong></p><ul><li><code>buf.length</code> </li><li><code>buf.toString()</code></li><li><code>buf.fill()</code> 填充一些值</li><li><code>buf.equals()</code> 两个<code>buffer</code>的内容是否相等</li><li><code>buf.indexOf()</code> 找到字符的位置</li><li><code>buf.copy()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">"This is a test!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.length); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"base64"</span>)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// buf1.fill填充一些值</span></span><br><span class="line"><span class="comment">//&lt;Buffer a0 b4 25 00 00 00 00 00 01 00&gt;</span></span><br><span class="line"><span class="comment">//&lt;Buffer a0 b4 0a 0a 0a 0a 00 00 01 00&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1)</span><br><span class="line"><span class="built_in">console</span>.log(buf1.fill(<span class="number">10</span>,<span class="number">2</span>,<span class="number">6</span>)) <span class="comment">// 从第二个开始到第六个填充10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// buf.equals两个buffer的内容是否相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.from(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.from(<span class="string">"test!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf2.equals(buf3)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2.equals(buf4)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// buf.indexOf() 找到字符的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf2.indexOf(<span class="string">"es"</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2.indexOf(<span class="string">"esa"</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决中文乱码问题</span></span><br><span class="line"><span class="keyword">const</span> StringDecoder = <span class="built_in">require</span>(<span class="string">"string_decoder"</span>).StringDecoder;</span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">"utf8"</span>);</span><br><span class="line"><span class="keyword">const</span> buf5 = Buffer.from(<span class="string">"中文字符串"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 乱码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;buf5.length;i+=<span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> b = Buffer.allocUnsafe(<span class="number">5</span>);</span><br><span class="line">buf5.copy(b,<span class="number">0</span>,i);</span><br><span class="line"><span class="built_in">console</span>.log(b.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在乱码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;buf5.length;i+=<span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> b = Buffer.allocUnsafe(<span class="number">5</span>);</span><br><span class="line">buf5.copy(b,<span class="number">0</span>,i);</span><br><span class="line"><span class="built_in">console</span>.log(decoder.write(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><blockquote><p>大多数 Node.js 核心 API 都采用惯用的异步事件驱动架构，其中某些类型的对象（触发器）会周期性地触发命名事件来调用函数对象（监听器）</p></blockquote><ul><li><code>eventEmitter.on()</code> 方法用于注册监听器，<code>eventEmitter.emit()</code> 方法用于触发事件</li><li>这和在浏览器上不同，在浏览器上靠的是用户做的一些UI的操作触发，如<code>click\hover</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承EventEmitter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> CustomEvent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定一个事件名 test，完成事件处理程序</span></span><br><span class="line">ce.on(<span class="string">"test"</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"This is a test"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// emit触发事件</span></span><br><span class="line">ce.emit(<span class="string">"test"</span>);</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承EventEmitter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> CustomEvent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件处理程序</span></span><br><span class="line">ce.on(<span class="string">"error"</span>,(err,time) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"><span class="built_in">console</span>.log(time);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给事件处理程序传递多个参数</span></span><br><span class="line">ce.emit(<span class="string">"error"</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"出错了"</span>),<span class="built_in">Date</span>.now())</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承EventEmitter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> CustomEvent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// once只响应一次事件 如jQuery中的once()</span></span><br><span class="line">ce.once(<span class="string">"test"</span>,()=&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"test event once"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// emit触发事件</span></span><br><span class="line">ce.emit(<span class="string">"test"</span>);</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承EventEmitter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"fn1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"fn2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> CustomEvent();</span><br><span class="line"></span><br><span class="line">ce.on(<span class="string">"test"</span>,fn1);</span><br><span class="line">ce.on(<span class="string">"test"</span>,fn2);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// emit触发事件</span></span><br><span class="line">ce.emit(<span class="string">"test"</span>);</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeListener移除事件</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// ce.removeListener("test",fn2)</span></span><br><span class="line">ce.removeAllListeners(<span class="string">"test"</span>); <span class="comment">//移除test绑定的事件</span></span><br><span class="line">&#125;,<span class="number">1500</span>)</span><br></pre></td></tr></table></figure><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><ul><li>异步方法的最后一个参数都是一个回调函数。 </li><li>传给回调函数的参数取决于具体方法，但回调函数的第一个参数都会保留给异常。 如果操作成功完成，则第一个参数会是 <code>null</code> 或 <code>undefined</code></li><li>当使用同步方法时，任何异常都会被立即抛出。 可以使用   <code>try/catch</code> 来处理异常，或让异常向上冒泡</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// readFile 异步操作</span></span><br><span class="line"><span class="comment">// 规范：回调函数的第一个参数都会保留给异常</span></span><br><span class="line">fs.readFile(<span class="string">"./fs.js"</span>,<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// readFile 同步操作（同步先执行）</span></span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">"./path.js"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">"./write.js"</span>,<span class="string">"This is a  test"</span>,&#123;<span class="attr">encoding</span>:<span class="string">"utf8"</span>&#125;,err=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stat文件信息</span></span><br><span class="line">fs.stat(<span class="string">"./fs.js"</span>,(err,stats)=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文件不存在"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stats.isFile()) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(stats.isDirectory()) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stats)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Stats &#123;</span></span><br><span class="line"><span class="comment">  dev: -835755091,</span></span><br><span class="line"><span class="comment">  mode: 33206,</span></span><br><span class="line"><span class="comment">  nlink: 1,</span></span><br><span class="line"><span class="comment">  uid: 0,</span></span><br><span class="line"><span class="comment">  gid: 0,</span></span><br><span class="line"><span class="comment">  rdev: 0,</span></span><br><span class="line"><span class="comment">  blksize: undefined,</span></span><br><span class="line"><span class="comment">  ino: 562949953557826,</span></span><br><span class="line"><span class="comment">  size: 216,</span></span><br><span class="line"><span class="comment">  blocks: undefined,</span></span><br><span class="line"><span class="comment">  atime: 2017-10-15T12:24:01.933Z,</span></span><br><span class="line"><span class="comment">  mtime: 2017-10-15T12:49:00.341Z,</span></span><br><span class="line"><span class="comment">  ctime: 2017-10-15T12:49:00.341Z,</span></span><br><span class="line"><span class="comment">  birthtime: 2017-10-15T12:24:01.871Z</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rename修改文件名</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.rename(<span class="string">"./write.js"</span>,<span class="string">"test.js"</span>,err=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unlink删除文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.unlink(<span class="string">"./test.js"</span>,err=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读文件夹相关操作</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">"./"</span>,(err,files)=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(files);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">[ '.vscode',</span></span><br><span class="line"><span class="comment">  'buffer.js',</span></span><br><span class="line"><span class="comment">  'events.js',</span></span><br><span class="line"><span class="comment">  'fs.js',</span></span><br><span class="line"><span class="comment">  'path.js',</span></span><br><span class="line"><span class="comment">  'test1.js',</span></span><br><span class="line"><span class="comment">  'test2.js',</span></span><br><span class="line"><span class="comment">  'test3.js',</span></span><br><span class="line"><span class="comment">  'test4.js' ]</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件夹</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">"test"</span>,err=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文件夹</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">"./test"</span>,err=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch监视文件变化</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.watch(<span class="string">"./"</span>,&#123;</span><br><span class="line">recursive: <span class="literal">true</span> <span class="comment">//是否循环递归</span></span><br><span class="line">&#125;,(eventType,filename) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(eventType, filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readStream 流 (从一个方向流向另一个方向)</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">"./fs.js"</span>);</span><br><span class="line"></span><br><span class="line">rs.pipe(process.stdout) <span class="comment">// process.stdout控制台</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// writeStream </span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = fs.createWriteStream(<span class="string">"./test5.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> time = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">7</span>) &#123;</span><br><span class="line">ws.write(num + <span class="string">""</span>); <span class="comment">// 需要转成字符串或者buffer才能写入</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">clearInterval(time);</span><br><span class="line">ws.end();<span class="comment">// 写完数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用事件判断是否写完数据</span></span><br><span class="line">ws.on(<span class="string">"finish"</span>, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"done!"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="异步解决方案"><a href="#异步解决方案" class="headerlink" title="异步解决方案"></a>异步解决方案</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步回调 Node.js v8.0.0版本增加了util.promisify函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">"util"</span>).promisify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> read = promisify(fs.readFile); </span><br><span class="line"></span><br><span class="line">read(<span class="string">"./callback.js"</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">ex</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ex)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// async awit</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> content = awit read(<span class="string">"./callback.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(content.toString())</span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(ex)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Path&quot;&gt;&lt;a href=&quot;#Path&quot; class=&quot;headerlink&quot; title=&quot;Path&quot;&gt;&lt;/a&gt;Path&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提供了一些工具函数，用于处理文件与目录的路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;stro
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs之环境&amp;调试（二）</title>
    <link href="http://blog.poetries.top/2017/10/15/node-env-debug/"/>
    <id>http://blog.poetries.top/2017/10/15/node-env-debug/</id>
    <published>2017-10-15T08:30:15.000Z</published>
    <updated>2017-11-10T07:51:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><p><strong>commonJS</strong></p><ul><li><code>nodejs</code>模块管理规范<ul><li>每一个文件是一个模块，有自己的作用域</li><li>在模块内部<code>module</code>变量代表模块本身</li><li><code>module.exports</code>属性代表模块对外接口</li></ul></li></ul><p><strong>exports与module.exports</strong></p><ul><li><code>exports = module.exports</code> <code>exports</code>是<code>module.exports</code>的快捷方式，不能修改<code>exports</code>的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种方式修改了exports的指向，这样是不行的</span></span><br><span class="line">exports = &#123;</span><br><span class="line">    a:<span class="string">""</span>,</span><br><span class="line">    b:<span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样没问题</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    a:<span class="string">""</span>,</span><br><span class="line">    b:<span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>global</strong></p><blockquote><p>全局访问的属性和方法挂载到global对象中</p></blockquote><ul><li><code>global</code>下的全局属性方法<ul><li><code>commonJS</code></li><li><code>Buffer</code>、<code>process</code>、<code>console</code></li><li><code>timer</code> (<code>setInterval</code>、<code>setTimeout</code>、<code>setImmediate</code>)</li></ul></li></ul><p><strong>process</strong></p><ul><li><strong>process.argv</strong><ul><li>参数相关的东西 <code>argv</code></li><li><code>argv0</code>是<code>argv</code>的第一个参数</li><li><code>execArgv</code>是调用<code>node</code>所传入的一些参数 如<code>node --inspect test.js</code></li><li><code>exevPath</code>调用脚本的路径 <code>C:\Program Files\nodejs\node.exe</code></li><li><code>&gt;node test3.js a=1 a=2 a=3 a=4</code>执行的时候，传入一些外部的命令</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;argv, argv0, execArgv, exevPath&#125; = process;</span><br><span class="line"></span><br><span class="line">argv.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="comment">//C:\Program Files\nodejs\node.exe</span></span><br><span class="line">    <span class="comment">//C:\Users\Administrator\Desktop\learn_node\test3.js</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>process.env</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;env&#125; = process;</span><br></pre></td></tr></table></figure><ul><li><strong>process.cwd</strong><ul><li>打印当前路径</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\learn_node</span><br></pre></td></tr></table></figure><ul><li><strong>process.nextTick与setImmediate</strong><ul><li>执行速度： <code>nextTick</code> &gt; <code>setTimeout</code> &gt; <code>setImmediate</code></li><li><code>nextTick</code>在异步之前执行</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nextTick比setImmediate执行得早</span></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// 当前事件队列执行完之后再执行</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"nextTick"</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在大部分情况下使用setImmediate就行</span></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setImmediate"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//nextTick</span></span><br><span class="line"><span class="comment">//setImmediate</span></span><br></pre></td></tr></table></figure><h2 id="二、调试"><a href="#二、调试" class="headerlink" title="二、调试"></a>二、调试</h2><ul><li>官方调试方法 <a href="https://nodejs.org/en/docs/inspector/" target="_blank" rel="external">https://nodejs.org/en/docs/inspector/</a></li></ul><p><strong>方法一：使用inspect</strong></p><ul><li>Option 1: Open <code>chrome://inspect</code> in a Chromium-based browser. Click the Configure button and ensure your target host and port are listed. Then select your Node.js app from the list</li><li>Option 2: <code>Install the Chrome</code>Extension NIM (Node Inspector Manager): <a href="https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj" target="_blank" rel="external">https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj</a></li></ul><p><strong>方法二：使用VS code</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、环境&quot;&gt;&lt;a href=&quot;#一、环境&quot; class=&quot;headerlink&quot; title=&quot;一、环境&quot;&gt;&lt;/a&gt;一、环境&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;commonJS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodejs&lt;/code&gt;模块管理
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs之简单入门（一）</title>
    <link href="http://blog.poetries.top/2017/10/15/learn-node-start/"/>
    <id>http://blog.poetries.top/2017/10/15/learn-node-start/</id>
    <published>2017-10-15T03:40:43.000Z</published>
    <updated>2017-11-10T07:51:40.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>nodejs是事件驱动、非阻塞I/O模型</p></blockquote><ul><li>阻塞：i/o时进程休眠等待完成后进行下一步</li><li>非阻塞：i/o时函数立即返回，进程不等待i/o返回</li></ul><blockquote><p>i/o完成后通知主程序，如何告诉呢？通过事件驱动</p></blockquote><p><strong>事件驱动</strong></p><ul><li>i/o等异步操作结束后通知</li><li>内部实现是观察者模式</li></ul><p><strong>CPU密集和I/O密集</strong></p><ul><li><code>CPU</code>密集：压缩、解压、加密、解密</li><li><code>I/O</code>密集：文件操作、网络操作、数据库</li></ul><p><strong>web常见场景(web是一个I/O密集)</strong></p><ul><li>静态资源读取</li><li>数据库操作</li><li>渲染页面</li></ul><p><strong>高并发应用之道</strong></p><ul><li>增加机器数</li><li>增加每台机器CPU数-多核</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-64c380eb78d068a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>进程、线程</strong></p><ul><li>进程：一个运行的程序（进程包括线程，如何水分子里面还有分子原子）</li><li>线程：进程内一个独立的，可调度的执行单元</li><li>多线程：启动一个进程，在一个进程内启动多个线程，这样多个线程可以执行多个任务</li></ul><p><strong>Nodejs的单线程</strong></p><ul><li>单线程只是针对主进程，I/O操作系统底层多线程调度</li><li>单线程并不是单进程</li></ul><p><strong>Nodejs原理</strong></p><ul><li>Node是单线程的，只开一个进程，一个进程也只开一个线程。一个CPU上只开一个进程，一个进程里面只有一个线程</li></ul><p><strong>nodejs高性能的前提</strong></p><ul><li>高并发</li><li><code>I/O</code>密集</li></ul><p><strong>常用场景</strong></p><ul><li><code>web Server</code></li><li>本地代码构建 (<code>webpack/grunt/gulp</code>)</li><li>使用工具的开发</li></ul><h2 id="二、nodejs与JavaScrip异同"><a href="#二、nodejs与JavaScrip异同" class="headerlink" title="二、nodejs与JavaScrip异同"></a>二、nodejs与JavaScrip异同</h2><ul><li><code>ECMAScript</code></li><li>语法</li><li>内置对象、方法</li></ul><p><strong>顶层对象</strong></p><ul><li><code>JavaScript</code>：<code>window</code></li><li><p><code>nodejs</code>: <code>global</code></p></li><li><p>在ECMA部分node和JavaScript是一样的，比如数据类型的定义，语法结构、内置对象</p></li></ul><h2 id="三、模块"><a href="#三、模块" class="headerlink" title="三、模块 "></a>三、模块 </h2><ul><li>在<code>node</code>中文件和模块是一一对应的，也就是一个文件一个模块。<strong>file是每个模块下必有的一个属性，输出文件的绝对路径。`</strong>dirname` 是文件夹名称绝对路径</li><li>每个模块都有自己的作用域</li><li>我们通过var声明的变量并非全局，而是该模块作用域下的</li></ul><p><strong>模块加载机制</strong></p><ul><li><code>require</code>加载模块</li><li>1、首先按照加载模块的文件名称进行查找</li><li>2、如果没有找到就会在文件模块文件名称后加载<code>.js</code>进行查找</li><li>3、如果还没有找到，就在文件名称后加载<code>.json</code>后缀，进行查找</li><li>4、如果还没找到，就会在文件名称后加上<code>.node</code>进行查找</li><li>查找流程：<strong>文件名称-&gt;.js -&gt; .json-&gt;.node</strong></li></ul><p><strong>exports、module</strong></p><ul><li>保存当前模块有关的一些信息</li><li><code>module.exports</code> 一般使用这个,把一个模块中的变量对外提供访问</li><li>在模块作用域，还有一个内置的模块对象，<code>exports</code>其实就是<code>module.exports</code>,他们两个都是指向同一个对象</li></ul><h2 id="四、node目录的配置"><a href="#四、node目录的配置" class="headerlink" title="四、node目录的配置"></a>四、node目录的配置</h2><ul><li>配置文件 : <code>package.json</code><ul><li>dependencies :  当前项目所使用到的依赖模块</li><li>安装方式: <code>npm install</code> 自动读取<code>package.json</code>自动安装</li></ul></li><li><code>router</code>目录 用来存放路由文件</li><li><code>views</code>目录  用来存放<code>html</code>模板文件</li><li><code>module</code>目录  自己写的一些模块</li></ul><h2 id="五、第一个node服务器"><a href="#五、第一个node服务器" class="headerlink" title="五、第一个node服务器"></a>五、第一个node服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   安装好node就有的一个模块</span></span><br><span class="line"><span class="comment">//  用来创建http服务器的</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">`http`</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//request 请求对象     浏览器 请求 服务器所有的内容保存在这个对象里</span></span><br><span class="line">    <span class="comment">//response 响应对象     服务器响应浏览器 所有的方法</span></span><br><span class="line">    response.writeHead(<span class="number">200</span> , &#123; <span class="string">'Content-Type'</span>:<span class="string">'text/html'</span> &#125; );</span><br><span class="line">    <span class="comment">//  .end() 结束响应 同时发送一个 Hello Word</span></span><br><span class="line">    response.end(<span class="string">'Hello Word'</span>)</span><br><span class="line">&#125;).listen(<span class="number">233</span>);</span><br><span class="line"><span class="comment">//.listen(); 监听端口 233  自定义的端口号</span></span><br><span class="line"><span class="comment">// 如果开启了node服务器  修改完之后的代码必须 重启才能生效</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;nodejs是事件驱动、非阻塞I/O模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;阻
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
  </entry>
  
</feed>
